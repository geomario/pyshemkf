# When is one endres better than the other

import os
import matplotlib as mpl
import scipy as sc
from scipy import stats
import numpy as np
from mypackage.plot import plotfunctions
from mypackage.run import runmodule as rm
import pandas as pd


dats = ['2015_10_12','2015_10_12']
lets = ['b','ol']
figtitles = ['Ensemble hybrid: 1000','Ensemble normal: 1000']

png_name_diff = 'diff_' + dats[0] + '_' + lets[0] + '_' + dats[1] + '_' + lets[1] + '.png'

endres_means = np.array([])
endres_stds = np.array([])
endres_mins = np.array([])
endres_maxs = np.array([])

for i in range(2):
    dat = dats[i]
    let = lets[i]
    figtitle = figtitles[i]

    num = 100
    num_obs = 100                             #Should be almost constant
    png_name_hist = 'test_2_' + dat + '_' + let + '.png'

    # The array with the final residuals
    endres = [plotfunctions.my_vtk_to_numpy('/home/jk125262/shematOutputDir_Cluster/wave_output/' + dat + '/' + dat + '_'+rm.get_let_num(j)+'/enkf_output','residual_E1.vtk','rms_kz_aft')[num_obs-1][0] for j in range(rm.get_num_let(let),rm.get_num_let(let)+num)]

    # The number of final residuals bigger than 0.6
    higher_array = [1 if endres[j]>0.6 else 0 for j in range(num)]
    num_higher = sum(higher_array)

    # Mean and standard deviation
    endres_mean = np.mean(endres)
    endres_std = np.std(endres)
    endres_min = np.percentile(endres,0)
    endres_quart =  np.percentile(endres,25)
    endres_median = np.percentile(endres,50)
    endres_threequart =  np.percentile(endres,75)
    endres_max =  np.percentile(endres,100)


    endres_means = np.insert(endres_means,i,endres_mean)
    endres_stds = np.insert(endres_stds,i,endres_std)
    endres_mins = np.insert(endres_mins,i,endres_min)
    endres_maxs = np.insert(endres_maxs,i,endres_max)

    x = np.linspace(endres_min-endres_std,endres_max+endres_std,200)
    gauss_dist = sc.stats.norm.pdf((x-endres_mean)/endres_std)/endres_std

    os.chdir('/home/jk125262/PythonDir')

    # fig = plt.figure(i+1)
    # # plt.axis([0.2,1.0,0.0,50])
    # # ax = fig.add_subplot(111)
    # plt.hist(endres,np.linspace(0.2,0.6,50),color = 'grey')
    # plt.xlabel(r'Residual [$log(\frac{1}{m^2})$]',fontsize = 12)
    # plt.ylabel('Number of occurences',fontsize = 12)
    # plt.text(0.95,0.8,
    #          'Mean,Std     : ' + str(endres_mean)[0:5] + ' +- ' + str(endres_std)[0:5] + '\n'
    #          + 'Min              : '  + str(endres_min)[0:5] + '\n'
    #          + '0.25 quartile: '  + str(endres_quart)[0:5] + '\n'
    #          + 'Median        : '  + str(endres_median)[0:5] + '\n'
    #          + '0.75 quartile: '  + str(endres_threequart)[0:5] + '\n'
    #          + 'Max             : '  + str(endres_max)[0:5] + '\n',
    #          transform = plt.gca().transAxes,
    #          horizontalalignment = 'right',
    #          verticalalignment = 'center',
    #          fontsize = 12)
    # plt.plot(x,gauss_dist,'-r',lw = 3.0)
    # plt.title(figtitle,fontsize = 20)
    # plt.savefig('/home/jk125262/PythonDir/output/single_job/diff/'+png_name_hist)
    # plt.show()

x_diff = np.linspace(-0.1,# endres_mins[0]-endres_maxs[1] -np.sum(endres_std), 
                     0.1,# endres_maxs[0]-endres_mins[1] +np.sum(endres_std),
                     800)
std_diff = np.sqrt(np.sum(endres_stds**2))
mean_diff =  np.diff(endres_means)[0]
gauss_diff = sc.stats.norm.pdf((x_diff-mean_diff)/std_diff)/std_diff
prob_a = 100.0*sc.stats.norm.cdf((-mean_diff)/std_diff)
prob_b = 100.0*(1.0-sc.stats.norm.cdf((-mean_diff)/std_diff))
fig = plt.figure(3)
plt.xlabel(r'Residual Difference [$log(\frac{1}{m^2})$]',fontsize = 12)
plt.ylabel('Probability Distribution',fontsize = 12)
plt.title('Probability for higher Residual',fontsize=20)
plt.text(0.025,0.9,
         figtitles[0],
         transform = plt.gca().transAxes,
         horizontalalignment = 'left',
         verticalalignment = 'center',
         fontsize = 12)
plt.text(0.025,0.8,
         str(prob_a)[0:5],
         transform = plt.gca().transAxes,
         horizontalalignment = 'left',
         verticalalignment = 'center',
         fontsize = 20)
plt.text(0.975,0.9,
         figtitles[1],
         transform = plt.gca().transAxes,
         horizontalalignment = 'right',
         verticalalignment = 'center',
         fontsize = 12)
plt.text(0.975,0.8,
         str(prob_b)[0:5],
         transform = plt.gca().transAxes,
         horizontalalignment = 'right',
         verticalalignment = 'center',
         fontsize = 20)
plt.plot(x_diff,gauss_diff,'-k',lw=3.0)
plt.plot([0,0],[0,sc.stats.norm.pdf(-mean_diff/std_diff)/std_diff],'--k',lw = 3.0)
plt.savefig('/home/jk125262/PythonDir/output/single_job/diff/'+png_name_diff)
plt.show()
