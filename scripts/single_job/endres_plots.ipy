# Endres distribution and plot for diverging runs

import os
import matplotlib as mpl
import numpy as np
from mypackage.plot import plotfunctions
from mypackage.plot import plotarrays as pa
from mypackage.run import runmodule as rm
import pandas as pd


model = 'wavebc'
is_1000 = True
n_runs = 1000 if is_1000 else 100

is_show = 1
is_save = 1

imethods = [0,1]                                #see plotarrays.py
enssizes = [50,70,100,250]

dats = pa.dats[model][n_runs]
lets = pa.lets[model][n_runs]
names = pa.names_methods


num_obs = 100                             #Should be almost constant
num = 1000 if is_1000 else 100


xlims = [0.25,1.1]
ylims = [0,135]


for imethod in imethods:
    for enssize in enssizes:

        dat = dats[imethod][enssize]
        let = lets[imethod][enssize]

        # The array with the final residuals
        endres = np.load('output/dists/npy/endres_'+dat+'_'+let+'.npy')

        # The number of final residuals bigger than 0.6
        higher_array = [1 if endres[i]>0.6 else 0 for i in range(num)]
        num_higher = sum(higher_array)

        # Mean and standard deviation
        endres_mean = np.mean(endres)
        endres_std = np.std(endres)

        endres_min = np.percentile(endres,0)
        endres_quart =  np.percentile(endres,25)
        endres_median = np.percentile(endres,50)
        endres_threequart =  np.percentile(endres,75)
        endres_max =  np.percentile(endres,100)

        # Data Frame (pandas-module)
        df = pd.DataFrame(endres)

        figtitle = 'Realizations: ' + str(enssize)
        png_name_hist = 'hist_' + str(imethod) + '_' + str(enssize).zfill(4) + '.eps'
        png_name_plot = 'plot_' + str(imethod) + '_' + str(enssize).zfill(4) + '.png'

        # plt.figure(1,[18,5])
        # plt.axes([0.05,0.1,0.9,0.8])
        # plt.plot(endres,color='grey')
        # plt.ylim([0,4])
        # plt.xlabel('Run',fontsize = 12)
        # plt.ylabel(r'RMSE [$log(\frac{1}{m^2})$]',fontsize = 12)
        # plt.hlines(0.6,0,100)
        # plt.text(30,3,'Higher than intial: '+str(num_higher),fontsize = 20)
        # plt.title(figtitle,y=1.03,fontsize = 20)
        # os.chdir(os.environ['HOME']+'/PythonDir')
        # if is_save:
        #     plt.savefig(os.environ['HOME']+'/PythonDir/output/single_job/plots/'+png_name_plot)
        # if is_show:
        #     plt.show()

        plt.figure(2,[10,15], facecolor = (1.0,1.0,1.0))

        plt.hist(endres,np.linspace(0.25,1.3,150),color = 'grey')
        plt.gca().set_position([0.2,0.15,0.75,0.75])
        plt.xlabel(r'RMSE [$log(\frac{1}{m^2})$]',fontsize = 40, labelpad = 10)
        plt.ylabel('Number of occurences',fontsize = 40,labelpad = 10)
        plt.text(0.95,0.90,
                 ' ' + str(endres_mean)[0:5] + ' $\pm$ ' + str(endres_std)[0:5] + '\n',
                 transform = plt.gca().transAxes,
                 horizontalalignment = 'right',
                 verticalalignment = 'center',
                 fontsize = 30)
        plt.vlines(endres_mean,0,150, linestyle="--")
        plt.gca().tick_params(labelsize = 30)
        plt.title(figtitle,y=1.03,fontsize = 40)
        plt.xlim(xlims)
        plt.ylim(ylims)

        # Boxplot
        plt.axes([0.8,0.2,0.1,0.6], axisbg = 'w',frameon = True)
        df.plot(kind='box',grid = False,color='k',sym='k.',ax=plt.gca())
        plt.gca().tick_params(labelsize = 30)
        plt.ylim(xlims)
        os.chdir(os.environ['HOME']+'/PythonDir')
        if is_save:
            plt.savefig(os.environ['HOME']+'/PythonDir/output/single_job/plots/'+png_name_hist)
        if is_show:
            plt.show()
        else:
            plt.close()
