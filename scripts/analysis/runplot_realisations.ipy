import shutil
import matplotlib.pyplot as plt

from mypackage.tools.plot import specs as sc
import mypackage.scripts.analysis.arrays as aa
import mypackage.scripts.analysis.variables as av
import mypackage.scripts.analysis.plot as ap
import mypackage.scripts.analysis.read as ar
import mypackage.tools.run.pythonmodule as pm
import mypackage.tools.plot.plotfunctions as pf

# Switches
is_read = 1
is_plot = 1
is_save = 0
is_show = 1
is_backup = 0

# Specs
model_name = 'wavebc'
dat = '2017_09_20'
let = 'b'

# Letters of wanted range
lets = [let] #aa.lets[sc.specl(model_name,dat,let)]

varnames = ['kz_03']#,'kz_02','kz_03','kz_04','kz_05','kz_06','kz_07','kz_08']

# Read
if is_read:
    for varname in varnames:
        numpy_array, numpy_array_name = ar.read(model_name,dat,lets[0],
                                                varname = varname,
                                                nt = 1,
                                                befaft = 'aft'
                                                    )
        np.save(numpy_array_name,numpy_array)
        print('Saved as ' + numpy_array_name)

# Plot
if is_plot:

    for varname in varnames:
        # Figure
        fig = plt.figure(1,figsize=[15,10])

        # Run plot function
        ax, pic_name = ap.plot(fig.add_subplot(1,1,1),
                               model_name,
                               dat,
                               lets[0],
                               nt = 1,
                               diff_ticks = 2,
                               auto_cbar = False,
                               low_cbar = -11.5,
                               high_cbar = -9.5,
                               num_cbar = 15,
                               pic_format = 'png',
                               varname = varname
                           )

        # Colorbar
        cb_ax = pf.cb(fig.add_subplot(1,2,1),
                      ax)

        # Save
        if is_save:
            plt.savefig(pic_name)
            print('Saved as ' + pic_name)

        # Show
        if is_show:
            plt.show()
        else:
            plt.clf()

# Backup
if is_backup:
    pm.py_backup(
        pm.python_scripts_dir,
        av.tag,
        "runplot",
        "ipy",
        sc.specl(model_name,
                 dat,
                 lets[0])
    )
