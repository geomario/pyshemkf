# Plot routine for forward pics

import os
import matplotlib as mpl
from matplotlib import cm            # Colormap commands (cm.get_cmap())
from matplotlib import colors
import numpy as np
import exceptions
from mypackage.plot import plotfunctions as pf
from mypackage.plot import plotarrays as pa
from mypackage.run import runmodule as rm
from mypackage.plot import mycolors
from mypackage.plot import grids
import pandas as pd


is_show = True
is_save = True

model_name = 'cubey'
varname = 'head'                             #'head','v','temp','kz'
v_component = 1                           #0,1,2
pic_format = 'png'

num_cbar = 10
low_cbar =  10.0285
high_cbar = 10.0304
auto_cbar = True

xlims = [0.0,0.8032]
ylims = [0.0,0.8032]

is_grid = False

is_ownticks = True
xownticks = [0.1+i*0.1 for i in range(9)]
yownticks = [0.1+i*0.1 for i in range(9)]

# Read grid arrays from mypackage/plot/grids.py
x = grids.x(model_name)
y = grids.y(model_name)
xticks = grids.xticks(model_name)
yticks = grids.yticks(model_name)

# Load variable array
var = np.load('output/forward/npy/'+varname+'_'+model_name+'.npy')

if varname == 'v':
    var = var[:,:,v_component]

if auto_cbar:
    low_cbar = var.min()
    high_cbar = var.max()

# Figure
fig = plt.figure(1,figsize=[15,10])
ax = fig.add_subplot(111)
ax.set_position([0.1,0.05,0.6,0.9])
im = mpl.image.NonUniformImage(ax,interpolation='nearest',
                                   cmap=mycolors.cmap_discretize(cm.viridis,num_cbar),
                                   norm = colors.Normalize(vmin=low_cbar,
                                                               vmax=high_cbar,
                                                               clip=False))
im.set_data(x,y,var)
ax.images.append(im)

# Ticks
if is_ownticks:
    ax.xaxis.set_ticks(xownticks)
    ax.yaxis.set_ticks(yownticks)
else:
    ax.xaxis.set_ticks(xticks[1::10])
    ax.yaxis.set_ticks(yticks[1::10])

# Grid
if is_grid:
    ax.grid()

# Title
# ax.set_title('Temperature field')

# Axis Limits
ax.set_xlim(xlims[0],xlims[1])
ax.set_ylim(ylims[0],ylims[1])

# Colorbar
cb_ax = fig.add_subplot(1,25,1)
cb_ax.set_position([0.8,0.1,0.03,0.8])
cb_ax.tick_params(labelsize = 20)
cb_ax.set_title(varname, y =1.02)
mpl.colorbar.Colorbar(cb_ax, im)

# Save
if is_save:
        if varname == 'v':
            varname = varname+'_'+str(v_component)
        plt.savefig(os.environ['HOME']+'/PythonDir/output/forward/'+pic_format+'/'
                            +model_name+'_'+varname+'.'+pic_format)
# Show
if is_show:
    plt.show()
else:
    plt.close()
