# Plot prescribed velocities

import os
import matplotlib as mpl
import numpy as np
from mypackage.plot import plotfunctions as pf
from mypackage.plot import plotarrays as pa
from mypackage.run import runmodule as rm
import pandas as pd

is_show = [True,True,True]
is_save = [True,True,True]

# General input
model_name = 'cubey'
dat = '2016_11_28'
lets = ['b']#,'d','e','f','g','h','i']#,'d','f','h']#,'k','l','m','n','o','p','q','r','s','t','u','v','w','x','y']
#['b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y']
#['b','c','d','e','f','g','h','i']
#['j','k','l','m','n','o','p','q']
#['r','s','t','u','v','w','x','y']
truedat = '2016_11_28'
truelet = 'a'
num_locs = 16

nrobs_int = 251

ns = 2-1                                     #Minus one for python
nm = 160

rad_factor = 10**7
rad_min = 0.0
rad_max = 4.0*10**-8 * rad_factor

true_vs = [-1.0*10**-8,-1.0*10**-8]
true_ang = 225
true_rad = 1.4*10**-8 * rad_factor

# num_pres_vel = 1                          #1 or 2

pic_format = 'eps'                         #'eps' and 'png'


# Time array
t = np.load('output/presvel/npy/'
                    +'truet_'+model_name+'_'+truedat+'_'+truelet+'_'+str(num_locs).zfill(4)+'.npy')
# Update times
tint = t[ns::nm]

for let in lets:

    # Names for the pictures------------------------------------------------------------
    pic_names = ['mvs_'        + model_name + '_' + dat + '_' + let,
                     'mvs_std_'+ model_name + '_' + dat + '_' + let,
                     'pol_'    + model_name + '_' + dat + '_' + let]

    # Load means------------------------------------------------------------------------
    mvxs = np.load('output/presvel/npy/mvxs_'+model_name+'_'+dat+'_'+let+'.npy')
    mvys = np.load('output/presvel/npy/mvys_'+model_name+'_'+dat+'_'+let+'.npy')
    vxs = np.load('output/presvel/npy/vxs_'+model_name+'_'+dat+'_'+let+'.npy')
    vys = np.load('output/presvel/npy/vys_'+model_name+'_'+dat+'_'+let+'.npy')
    # Load standard deviations
    svxs = np.std(vxs,axis=1)
    svys = np.std(vys,axis=1)
    # Load radius and angle
    rad = np.load('output/presvel/npy/rad_'+model_name+'_'+dat+'_'+let+'.npy')*rad_factor
    ang = np.load('output/presvel/npy/ang_'+model_name+'_'+dat+'_'+let+'.npy')

    # Plot means------------------------------------------------------------------------
    plt.figure(1,[8,4], dpi=200, facecolor = 'white')
    plt.title('Velocity x/y components', size = 12)
    plt.semilogx(tint,mvxs, 'o', color = 'black', markersize = 1.6)
    plt.semilogx(tint,mvys, 'o', color = 'grey', markersize = 1.6)
    plt.semilogx(tint,[true_vs[0] for i in range(nrobs_int)],color = 'black', linestyle = '--', lw = 1.2)
    plt.semilogx(tint,[true_vs[1] for i in range(nrobs_int)],color = 'grey', linestyle = '--', lw = 1.2)
    plt.xlabel(r'Time',fontsize = 14, labelpad=0)
    plt.ylabel(r'Velocity [$\frac{m}{s}$]',fontsize = 14)
    plt.gca().xaxis.set_ticks([10,60,600,3600,24*3600,10*24*3600])
    plt.gca().xaxis.set_ticklabels(['10s','1min','10min','1h','1d','10d'])
    
    if is_save[0]:
        plt.savefig(os.environ['HOME']+'/PythonDir/output/presvel/'+pic_format+'/'
                        +pic_names[0]+'.'+pic_format)
    if is_show[0]:
        plt.show()
    else:
        plt.clf()

    # Plot stddev-----------------------------------------------------------------------
    plt.figure(1,[8,4], dpi=200, facecolor = 'white')
    plt.title('Velocity x/y stddevs', size = 12)
    plt.semilogx(tint,svxs, 'o', color = 'black', markersize = 1.6)
    plt.semilogx(tint,svys, 'o', color = 'grey', markersize = 1.6)
    plt.xlabel(r'Time',fontsize = 14, labelpad=0)
    plt.ylabel(r'$\sigma$ Velocity [$\frac{m}{s}$]',fontsize = 14)
    plt.gca().xaxis.set_ticks([10,60,600,3600,24*3600,10*24*3600])
    plt.gca().xaxis.set_ticklabels(['10s','1min','10min','1h','1d','10d'])
    
    if is_save[1]:
        plt.savefig(os.environ['HOME']+'/PythonDir/output/presvel/'+pic_format+'/'
                        +pic_names[1]+'.'+pic_format)
    if is_show[1]:
        plt.show()
    else:
        plt.clf()

    # Polar Plot radius and angle-------------------------------------------------------
    plt.figure(1,[4,4], dpi=200, facecolor = 'white')
    ax = plt.subplot(111, projection = 'polar')

    # Colors from black to white
    color_factors = np.linspace(0,1,nrobs_int)
    colors = np.zeros([nrobs_int,3])
    for ic in range(len(color_factors)):
        colors[ic,0] = color_factors[ic]
        colors[ic,1] = color_factors[ic]
        colors[ic,2] = color_factors[ic]

    # Scatter: All points
    ax.scatter(ang[:nrobs_int]*np.pi/180,rad[:nrobs_int],c=colors,s = 10)
    # Marker: True
    ax.scatter(true_ang*np.pi/180,true_rad, marker = 'x', s = 120 ,c = 'red',lw = 2)
    # Marker: First point
    ax.scatter(ang[0]*np.pi/180,rad[0], marker = 'o', s = 100 ,c = 'black',lw = 2)
    # Marker Last point
    ax.scatter(ang[nrobs_int-1]*np.pi/180,rad[nrobs_int-1], marker = 'x', s = 100 ,c = 'black',lw = 2)
    # Plot: Interpolation, every tenth point
    ax.plot([ang[i]*np.pi/180 for i in range(1,nrobs_int,10)],[rad[i] for i in range(1,nrobs_int,10)],
                c = 'grey')

    ax.set_rmax(rad_max)
    ax.set_rmin(rad_min)
    ax.grid(True)
    ax.set_title(r'Groundwater velocities $\cdot 10^{7}$ [m/s]', size = 14)
    plt.tick_params(labelsize=6)
    
    if is_save[2]:
        plt.savefig(os.environ['HOME']+'/PythonDir/output/presvel/'+pic_format+'/'
                        +pic_names[2]+'.'+pic_format)
    if is_show[2]:
        plt.show()
    else:
        plt.clf()

