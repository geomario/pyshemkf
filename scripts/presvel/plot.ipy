# Plot prescribed velocities

import os
import matplotlib as mpl
import numpy as np
from mypackage.plot import plotfunctions as pf
from mypackage.plot import plotarrays as pa
from mypackage.run import runmodule as rm
import pandas as pd

is_show = True
is_save = True

# General input
model_name = 'alexdiff'
nrens = 100
dat = '2016_08_08'
lets =['b','c','d']#,'e','f','g','h','i','j']#,'k','l','m','n','o','p','q','r','s','t','u','v','w','x','y']
#['b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y']
#['b','c','d','e','f','g','h','i']
#['j','k','l','m','n','o','p','q']
#['r','s','t','u','v','w','x','y']
truedat = '2016_08_08'
truelet = 'a'
num_locs = 16

rad_min = 0.0
rad_max = 1.0*10**-6

nrobs = 300

true_vs = [-2.7*10**-7,0.0]
true_ang = 180
true_rad = 2.7*10**-7

num_pres_vel = 2                          #1 or 2

pic_format = 'eps'                         #'eps' and 'png'

# Time array
t = np.load('output/presvel/npy/'
                    +'truet_'+truedat+'_'+truelet+'_'+str(num_locs).zfill(4)+'.npy')

for let in lets: 
    pic_names = ['mvs_'+ model_name + '_' + dat + '_' + let,
                     'pol_'+ model_name + '_' + dat + '_' + let]

    # Load means
    mvxs = np.load('output/presvel/npy/mvxs_'+model_name+'_'+dat+'_'+let+'.npy')
    mvys = np.load('output/presvel/npy/mvys_'+model_name+'_'+dat+'_'+let+'.npy')

    # Plot means
    plt.figure(1,[20,10], facecolor = 'white')
    plt.title('Velocity x/y components', size = 30)
    plt.semilogx(t[:nrobs],mvxs[:nrobs], 'o', color = 'black', markersize = 5)
    plt.semilogx(t[:nrobs],mvys[:nrobs], 'o', color = 'grey', markersize = 5)
    plt.semilogx(t[:nrobs],[true_vs[0] for i in range(nrobs)],color = 'black', linestyle = '--', lw = 3)
    plt.semilogx(t[:nrobs],[true_vs[1] for i in range(nrobs)],color = 'grey', linestyle = '--', lw = 3)
    plt.xlabel(r'Time',fontsize = 20)
    plt.ylabel(r'Velocity [$\frac{m}{s}$]',fontsize = 20)
    plt.gca().xaxis.set_ticks([10,60,600,3600,24*3600,10*24*3600])
    plt.gca().xaxis.set_ticklabels(['10s','1min','10min','1h','1d','10d'])
    
    if is_save:
        plt.savefig(os.environ['HOME']+'/PythonDir/output/presvel/'+pic_format+'/'
                        +pic_names[0]+'.'+pic_format)
    if is_show:
        plt.show()
    else:
        plt.close()



    # Load radius and angle
    rad = np.load('output/presvel/npy/rad_'+model_name+'_'+dat+'_'+let+'.npy')
    ang = np.load('output/presvel/npy/ang_'+model_name+'_'+dat+'_'+let+'.npy')

    # Plot radius and angle
    plt.figure(2,[10,10], facecolor = 'white')
    ax = plt.subplot(111, projection = 'polar')
    # ax.plot(ang,rad,'o', color = 'black')
    color_factors = np.linspace(0,1,nrobs)
    colors = np.zeros([nrobs,3])
    for ic in range(len(color_factors)):
        colors[ic,0] = color_factors[ic]
        colors[ic,1] = color_factors[ic]
        colors[ic,2] = color_factors[ic]
    ax.scatter(ang[:nrobs]*np.pi/180,rad[:nrobs],c=colors)
    ax.scatter(true_ang*np.pi/180,true_rad, marker = 'x', s = 1000 ,c = 'red',lw = 2)
    ax.scatter(ang[0]*np.pi/180,rad[0], marker = 'o', s = 300 ,c = 'black',lw = 2)
    ax.plot([ang[i]*np.pi/180 for i in range(1,nrobs,10)],[rad[i] for i in range(1,nrobs,10)],
                c = 'grey')
    ax.scatter(ang[nrobs-1]*np.pi/180,rad[nrobs-1], marker = 'x', s = 1000 ,c = 'black',lw = 2)
    ax.set_rmax(rad_max)
    ax.set_rmin(rad_min)

    ax.grid(True)
    ax.set_title('Polar plot of velocities', size = 20)

    if is_save:
        plt.savefig(os.environ['HOME']+'/PythonDir/output/presvel/'+pic_format+'/'
                        +pic_names[1]+'.'+pic_format)
    if is_show:
        plt.show()
    else:
        plt.close()

