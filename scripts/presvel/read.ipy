# Read prescribed velocities

import os
import matplotlib as mpl
import numpy as np
from mypackage.plot import plotfunctions as pf
from mypackage.plot import plotarrays as pa
from mypackage.run import runmodule as rm
import pandas as pd

model_name = 'alexpres'
nrens = 100
dat = '2016_07_27'
lets = ['b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y']
#['b','c','d','e','f','g','h','i']
#['j','k','l','m','n','o','p','q']
#['r','s','t','u','v','w','x','y']

nrobs = 230

num_pres_vel = 2                          #1 or 2


for let in lets:
    # Load velocities
    vs = np.loadtxt(os.environ['HOME']+'/shematOutputDir/'+model_name+'_output/' 
                        + dat + '/' + dat + '_'+ let
                        +'/enkf_output/'
                        +'prescribed_velocity_aft.txt',
                    skiprows = 1)

    # Split into x and y component
    for ipv in range(num_pres_vel):
        if ipv == 0:
            vxs = vs[:,0:nrens]
        if ipv == 1:
            vys = vs[:,nrens:2*nrens]
    np.save('output/presvel/npy/vxs_'+dat+'_'+let,vxs)
    np.save('output/presvel/npy/vys_'+dat+'_'+let,vys)

    # Ensemble mean of x and y component
    mvxs = np.mean(vxs,axis=1)                
    mvys = np.mean(vys,axis=1)
    np.save('output/presvel/npy/mvxs_'+dat+'_'+let,mvxs)
    np.save('output/presvel/npy/mvys_'+dat+'_'+let,mvys)

    # Absolute value and angle
    rad = np.sqrt(mvxs*mvxs + mvys*mvys)
    ang = np.arctan(mvys/mvxs)/np.pi*180
    # Second and third quadrant
    for i in range(len(mvxs)):
        if mvxs[i] < 0.0:
            if mvys[i] > 0.0:
                ang[i] = ang[i] + 180
            else:
                ang[i] = ang[i] - 180
    np.save('output/presvel/npy/rad_'+dat+'_'+let,rad)
    np.save('output/presvel/npy/ang_'+dat+'_'+let,ang)
