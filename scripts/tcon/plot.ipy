# Plot prescribed velocities

import os
import matplotlib as mpl
import numpy as np
from mypackage.tools.plot import plotfunctions as pf
from mypackage.tools.run import runmodule as rm
import pandas as pd

is_show = True
is_save = True

# General input
model_name = 'alexdiff'
nrens = 100
dat = '2016_08_08'
lets =['b','c','d','e','f','g','h','i','j']#,'k','l','m','n','o','p','q','r','s','t','u','v','w','x','y']
#['b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y']
#['b','c','d','e','f','g','h','i']
#['j','k','l','m','n','o','p','q']
#['r','s','t','u','v','w','x','y']
truedat = '2016_08_08'
truelet = 'a'
num_locs = 16

nrobs = 300

pic_format = 'png'                         #'eps' and 'png'

true_tc = [2.6,2.0]

# Time array
t = np.load('output/presvel/npy/'
                    +'truet_'+truedat+'_'+truelet+'_'+str(num_locs).zfill(4)+'.npy')

for let in lets: 
    pic_names = ['tcon_'+ model_name + '_' + dat + '_' + let,
                     'tcon_std_'+ model_name + '_' + dat + '_' + let]

    # Load means
    tcons = np.load('output/tcon/npy/tcons_'+dat+'_'+let+'.npy')

    tcons1 = tcons[:,:100]
    tcons2 = tcons[:,101:]

    mt1 = np.mean(tcons1,axis=1)
    mt2 = np.mean(tcons2,axis=1)
    st1 = np.std(tcons1,axis=1)
    st2 = np.std(tcons2,axis=1)

    # Plot means
    plt.figure(1,[20,10], facecolor = 'white')
    plt.title(r'Thermal conductivities, soil (black)/cement (grey)', size = 30)
    plt.semilogx(t[:nrobs],mt1[:nrobs], 'o', color = 'black', markersize = 5, label = 'Soil')
    plt.semilogx(t[:nrobs],mt2[:nrobs], 'o', color = 'grey', markersize = 5, label = 'Cement')
    plt.semilogx(t[:nrobs],[true_tc[0] for i in range(nrobs)],color = 'black', linestyle = '--', lw = 3)
    plt.semilogx(t[:nrobs],[true_tc[1] for i in range(nrobs)],color = 'grey', linestyle = '--', lw = 3)
    plt.xlabel(r'Time',fontsize = 20)
    plt.ylabel(r'Thermal Conductivity [$\frac{W}{mK}$]',fontsize = 20)
    plt.gca().xaxis.set_ticks([10,60,600,3600,24*3600,10*24*3600])
    plt.gca().xaxis.set_ticklabels(['10s','1min','10min','1h','1d','10d'])

    # plt.legend()

    if is_save:
        plt.savefig(os.environ['HOME']+'/PythonDir/output/tcon/'+pic_format+'/'
                        +pic_names[0]+'.'+pic_format)
    if is_show:
        plt.show()
    else:
        plt.close()

    # Plot stddev
    plt.figure(1,[20,10], facecolor = 'white')
    plt.title(r'Stddev of thermal conductivities, soil (black)/cement (grey)', size = 30)
    plt.semilogx(t[:nrobs],st1[:nrobs], 'o', color = 'black', markersize = 5, label = 'Soil')
    plt.semilogx(t[:nrobs],st2[:nrobs], 'o', color = 'grey', markersize = 5, label = 'Cement')
    # plt.semilogx(t[:nrobs],[true_vs[0] for i in range(nrobs)],color = 'black', linestyle = '--', lw = 3)
    # plt.semilogx(t[:nrobs],[true_vs[1] for i in range(nrobs)],color = 'grey', linestyle = '--', lw = 3)
    plt.xlabel(r'Time',fontsize = 20)
    plt.ylabel(r'$\sigma$ Thermal Conductivity [$\frac{W}{mK}$]',fontsize = 20)
    plt.gca().xaxis.set_ticks([10,60,600,3600,24*3600,10*24*3600])
    plt.gca().xaxis.set_ticklabels(['10s','1min','10min','1h','1d','10d'])

    # plt.legend()

    if is_save:
        plt.savefig(os.environ['HOME']+'/PythonDir/output/tcon/'+pic_format+'/'
                        +pic_names[1]+'.'+pic_format)
    if is_show:
        plt.show()
    else:
        plt.close()

