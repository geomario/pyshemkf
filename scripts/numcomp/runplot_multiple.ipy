import numpy as np
import matplotlib.pyplot as plt

from mypackage.tools.plot import specs as sc
from mypackage.tools.plot import plotfunctions as pf
import mypackage.scripts.numcomp.arrays as na
import mypackage.scripts.numcomp.plot as npl
import mypackage.scripts.numcomp.read as nr
import mypackage.tools.run.pythonmodule as pm

# Switches
is_read = 0
is_plot = 0
is_matrix = 0
is_save = 0
is_show = 0
is_backup = 0

model_name = 'model'
n_comparisons = 1000

for which_methods in [[0, 1, 2, 3, 4, 5],
                      [0, 1, 2],
                      [3, 4, 5]]:
    for enssize in [50, 250]:
        for n_syn in [1, 10, 100]:

            # Read
            if is_read:
                probs_array, probs_array_name = nr.read(
                    which_methods=which_methods,
                    model=model_name,
                    enssize=enssize,
                    n_syn=n_syn,
                    n_comparisons=n_comparisons,
                )

                np.save(probs_array_name, probs_array)
                print('Saved as ' + probs_array_name)

            # Plot
            if is_plot:

                # Figure
                fig = plt.figure('numcomp', figsize=[12, 6])
                fig.suptitle("Comparisons", fontsize=30, y=0.95)

                # Run plot function
                ax,  pic_name = npl.plot(
                    fig.add_subplot(1, 1, 1),
                    which_methods=which_methods,
                    which_methods_left=[1, 4, 6, 0, 3, 2],
                    which_methods_right=[4, 6, 0, 3, 2, 5],
                    n_comparisons=n_comparisons,
                )

                # Save
                if is_save:
                    plt.savefig(pic_name)
                    print('Saved as ' + pic_name)

                # Show
                if is_show:
                    plt.show()
                else:
                    plt.clf()

            # Matrix
            if is_matrix:

                # Figure
                fig = plt.figure('numcomp', figsize=[10, 10])
                plt.suptitle(model_name.upper()+", N = "+str(enssize)+"  Distribution: "+str(n_syn),
                             fontsize=30)

                # Run plot function
                ax, pic_name = npl.matrix(
                    fig.add_subplot(1, 1, 1),
                    which_methods=which_methods,
                    model=model_name,
                    indsorts=pf.indsort(which_methods, model_name=model_name,
                                        enssize=enssize),
                    enssize=enssize,
                    n_syn=n_syn,
                    n_comparisons=n_comparisons,
                )

                # Save
                if is_save:
                    plt.savefig(pic_name)
                    print('Saved as ' + pic_name)

                # Show
                if is_show:
                    plt.show()
                else:
                    plt.clf()

# Backup
if is_backup:
    pm.py_backup(
        pm.python_scripts_dir,
        na.tag,
        "runplot_multiple",
        "ipy",
        sc.specl(model_name,
                 '_'.join([str(i) for i in which_methods])[:],
                 '2018_01_08')
    )
