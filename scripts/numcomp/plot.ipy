# Plotting the Numerical comparison for different methods

import os
import matplotlib as mpl
import numpy as np
import exceptions
from mypackage.plot import plotfunctions as pf
from mypackage.plot import plotarrays as pa
from mypackage.run import runmodule as rm
from matplotlib import cm		# Colormap commands (cm.get_cmap())
from mypackage.plot import mycolors
import pandas as pd

is_1000 = True

# Number of synthetic studies: inside plot and for bold names
ns_syn_studies = [1,10,100] if is_1000 else [1,10]
n_syn_bold = 1000 if is_1000 else 100                          

# Method of comparison
method = "ttest"                          #"ttest" "gauss"

which_enssize = [250] if is_1000 else [50,70,100,250,500,1000,2000]           #Ensemble sizes

# Methods used in the comparison
is_show = 1
is_save = 1
pic_name_end = ['eps','png']                      #'png' or 'eps' or 'svg'
pic_dir = ['/home/jk125262/PythonDir/output/numcomp/'+pic_name_end[0][-3:]+'/',
           '/home/jk125262/PythonDir/output/numcomp/'+pic_name_end[1][-3:]+'/']

# which_methods_left = [1,6,5,4,3,2,6,6]        #Space in which_methods (50er)
# which_methods_right = [6,5,4,3,2,0,4,3]       #Space in which_methods
which_methods_left = [1,4,6,0,3,2,6,6]        #Space in which_methods (250er)
which_methods_right = [4,6,0,3,2,5,3,5]       #Space in which_methods

show_methods = [which_methods_left,
                which_methods_right]
# Number of bars 
num_comparisons = len(show_methods[0])
# Number of patches (3 per bar)
num_patches = 3*num_comparisons

# Ticks (names)
names = pa.longnames_methods1000 #if is_1000 else pa.names_methods
ytick1 = [names[show_methods[0][i]] for i in range(num_comparisons)]
ytick2 = [names[show_methods[1][i]] for i in range(num_comparisons)]

# Colors of the bar
basic_colors = ['black','white','grey']
# basic_colors = [cm.viridis(0),'white',cm.viridis(255)]

for n_syn in ns_syn_studies:
    for ensemble_size in which_enssize:

        # Figure title
        if n_syn==1:
            fig_title = str(n_syn)+' Synthetic Study'
        else:
            fig_title = str(n_syn)+' Synthetic Studies'

        # Load probabilities
        if n_syn == 1:
            if is_1000:
                probs = np.load('output/numcomp/npy/single/probs1000_'
                                +str(n_syn).zfill(4)+'_'
                                +str(ensemble_size).zfill(4)+'.npy')
            else:
                probs = np.load('output/numcomp/npy/single/probs_'
                                +str(n_syn).zfill(4)+'_'
                                +str(ensemble_size).zfill(4)+'.npy')
        elif method=="ttest":
            if is_1000:
                probs = np.load('output/numcomp/npy/ttest/probs1000_'
                                +str(n_syn).zfill(4)+'_'
                                +str(ensemble_size).zfill(4)+'.npy')
            else:
                probs = np.load('output/numcomp/npy/ttest/probs_'
                                +str(n_syn).zfill(4)+'_'
                                +str(ensemble_size).zfill(4)+'.npy')
        elif method=="gauss":
            if is_1000:
                probs = np.load('output/numcomp/npy/gaussian/probs1000_'
                                +str(n_syn).zfill(4)+'_'
                                +str(ensemble_size).zfill(4)+'.npy')
            else:
                probs = np.load('output/numcomp/npy/gaussian/probs_'
                                +str(n_syn).zfill(4)+'_'
                                +str(ensemble_size).zfill(4)+'.npy')

        # Load probabilities for bold labels
        if method=="ttest":
            if is_1000:
                    probs_bold =np.load('output/numcomp/npy/ttest/probs1000_'
                                        +str(n_syn_bold).zfill(4)+'_'
                                        +str(ensemble_size).zfill(4)+'.npy')
            else:
                    probs_bold =np.load('output/numcomp/npy/ttest/probs_'
                                        +str(n_syn_bold).zfill(4)+'_'
                                        +str(ensemble_size).zfill(4)+'.npy')
        elif method=="gauss":
            if is_1000:
                probs_bold =np.load('output/numcomp/npy/gaussian/probs1000_'
                                    +str(n_syn_bold).zfill(4)+'_'
                                    +str(ensemble_size).zfill(4)+'.npy')
            else:
                probs_bold =np.load('output/numcomp/npy/gaussian/probs_'
                                    +str(n_syn_bold).zfill(4)+'_'
                                    +str(ensemble_size).zfill(4)+'.npy')
            
        # Figure and first axis
        plt.figure(figsize = [12,num_comparisons/1.0])
        plt.title(fig_title,fontsize=30, y = 1.08)
        ax1 = plt.gca()
        ax1.set_position([0.3,0.05,0.4,0.75])
        ax1.set_frame_on(False)

        # Patch arrays for plt.barh()
        in_bottom = np.zeros(num_patches)
        in_height = np.zeros(num_patches)
        in_width = np.zeros(num_patches)
        in_left = np.zeros(num_patches)
        in_color = ['' for i in range(num_patches)]
        for i in range(num_patches):
            in_bottom[i] = num_comparisons-i/3
            in_height[i] = 0.8
            in_width[i] = probs[show_methods[0][i/3],
                                show_methods[1][i/3]][np.mod(i,3)]
            in_left[i] = np.sum(probs[show_methods[0][i/3],
                                      show_methods[1][i/3]][0:np.mod(i,3)])
            in_color[i] = basic_colors[np.mod(i,3)]

        # Plot bars
        plt.barh(bottom = in_bottom,
                 height = in_height,
                 width = in_width,
                 left = in_left,
                 color = in_color,
                 edgecolor = 'k')

        # H_0 labels inside bar
        if method == "ttest":
            for i in range(1,num_comparisons+1):
                if in_left[3*i-1]-in_left[3*i-2] > 0.15:
                    plt.text(in_left[3*i-2]   +0.4*(in_left[3*i-1]-in_left[3*i-2]),
                             in_bottom[3*i-2] +0.3,
                             "$H_0$",
                             fontsize = 20)

        # Axis 1
        ax1.tick_params(direction = 'out', length = 0,
                       width = 1, labelsize = 20,
                       top = 'off', bottom = 'off',
                       labelright = 'off',
                       pad = 8)
        ax1.set_xlim([-0.01,1.01])
        ax1.set_ylim([0.9,num_comparisons+0.8])
        ax1.set_xticks([])
        ax1.set_yticks([num_comparisons-i +0.4 for i in range(num_comparisons)])
        ax1.set_yticklabels(ytick1)

        # Twin Axis 2
        ax2 = ax1.twinx()
        ax2.set_position([0.3,0.05,0.4,0.75])
        ax2.set_frame_on(False)
        ax2.tick_params(direction = 'out', length = 0,
                       width = 1, labelsize = 20,
                       top = 'off', bottom = 'off',
                       labelleft = 'off',labelright = 'on',
                       labelcolor = 'black',
                       pad = 8)
        ax2.set_xlim([-0.01,1.01])
        ax2.set_ylim([0.9,num_comparisons+0.8])
        ax2.set_xticks([])
        ax2.set_yticks([num_comparisons-i +0.4 for i in range(num_comparisons)])
        ax2.set_yticklabels(ytick2)


        # Boldness of axislabels
        for i in range(num_comparisons):
            if(probs_bold[show_methods[0][i],show_methods[1][i]][0] == 1):
                ax1.yaxis.get_majorticklabels()[i].set_weight('bold')
            elif(probs_bold[show_methods[0][i],show_methods[1][i]][2] == 1):
                ax2.yaxis.get_majorticklabels()[i].set_weight('bold')
            else:
                ax1.yaxis.get_majorticklabels()[i].set_style('italic')
                ax2.yaxis.get_majorticklabels()[i].set_style('italic')

        # Save picture
        if is_save:
            pic_name_plot=['numcomp_'+str(n_syn).zfill(4)\
              +'_'+str(n_syn_bold).zfill(4)\
              +'_'+str(ensemble_size).zfill(4)+ '.'+ pic_name_end[0],
              'numcomp_'+str(n_syn).zfill(4)\
              +'_'+str(n_syn_bold).zfill(4)\
              +'_'+str(ensemble_size).zfill(4)+ '.'+ pic_name_end[1]]
            if method=="ttest":
                pic_name_plot=['numcomp_'+str(n_syn).zfill(4)\
                  +'_'+str(n_syn_bold).zfill(4)\
                  +'_'+str(ensemble_size).zfill(4)+'_ttest'+ '.'+ pic_name_end[0],
                  'numcomp_'+str(n_syn).zfill(4)\
                  +'_'+str(n_syn_bold).zfill(4)\
                  +'_'+str(ensemble_size).zfill(4)+'_ttest'+ '.'+ pic_name_end[1]]

            for i in range(len(pic_name_plot)):
                plt.savefig(pic_dir[i] + pic_name_plot[i])
                print('Saved as ' + pic_dir[i] + pic_name_plot[i])

        # Show picture
        if is_show:
            plt.show()
        else:
            plt.close()
