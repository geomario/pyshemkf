# Plotting uncertainties in matrices

import os
import matplotlib as mpl
import numpy as np
import exceptions
from mypackage.plot import plotfunctions as pf
from mypackage.plot import plotarrays as pa
from mypackage.run import runmodule as rm
import pandas as pd
from matplotlib import colors	        # Normalize colors (colors.Normalize())

# Show or save pictures
is_show = 1
is_save = 1

# Ensemble sizes to output
enssizes = [50,250]
iens = {50:0,
        70:1,
        100:2,
        250:3}

# Indices/Sorting/Number of methods
indsorts = {50:  [1,6,5,4,3,2,0],
            70:  [1,6,4,5,3,2,0],
            100: [1,4,6,3,0,5,2],
            250: [1,4,3,0,6,2,5],
            # 500: [1,4,6,0,3,2,5],
            # 1000:[1,4,6,0,3,2,5],
            # 2000:[1,4,6,0,3,2,5]
        }
num_methods = len(indsorts[50])

# Output 
pic_format = ['pdf','png']
pic_dirs = {pic_end :
            os.environ['HOME']+'/PythonDir/output/numcomp/matrix/'+pic_end+'/'
            for pic_end in pic_format}
pic_names = {enssize: 'matrixquotients_'+str(enssize).zfill(4)
             for enssize in enssizes}

ticksize = 20

load_dir = 'output/errorplot/npy/'

for enssize in enssizes:

    endres_mean = np.load(load_dir+'endres_mean1000_wavebc.npy')   # A(methods, ensemble sizes)
    # Sort probs
    quots = np.array([[endres_mean[imod1,iens[enssize]]/endres_mean[imod2,iens[enssize]] for imod1 in range(num_methods)] for imod2 in range(num_methods)])

    quots = quots[indsorts[enssize],:]
    quots = quots[:,indsorts[enssize]]
    
    # Plot: Figure size and title
    plt.figure(1,figsize=[10,10])
    # plt.suptitle("N = "+ str(enssize)+"  Quotients",
    #                  fontsize = 30)
    # Plot: Axis position and ticks
    ax = plt.subplot(111)
    ax.set_position([0.32,0.2,0.6,0.8])


    # Rectangles: Fraction of Undecided
    undecided = quots #np.zeros(quots.shape)
    # Rectangles: Remove lower triangle of matrix
    for ipm in range(num_methods):
        for jpm in range(num_methods):
            # if ipm > jpm:
            #     undecided[ipm,jpm] = None
            if ipm == jpm:
                undecided[ipm,jpm] = 0.0
            if ipm < jpm:
                undecided[ipm,jpm] = None

                    
    im2 = ax.imshow(undecided,interpolation='nearest',cmap='Greys_r',
                        norm = colors.Normalize(vmin=0.8,vmax=1.0,clip=False))
        
    # Plot: Mostly ticks
    plt.xticks(rotation=90)
    ax.set_xticks([i for i in range(num_methods)])
    ax.set_xticklabels([pa.names_methods[indsorts[enssize][i]] for i in range(len(indsorts))], fontsize=ticksize)
    ax.set_yticks([i for i in range(num_methods)])
    ax.set_yticklabels([pa.names_methods[indsorts[enssize][i]] for i in range(len(indsorts))], fontsize=ticksize)
    ax.tick_params(length=0)
    ax.set_frame_on(False)

    # Text
    for itext in range(num_methods):
        for jtext in range(num_methods):
            if itext<jtext:
                ntext = quots[jtext,itext]
                ttext = str(ntext)[0:4]
                px = itext-0.35 
                py = jtext+0.15
                colero = 'white' if ntext<0.9 else 'black'
            
                plt.text(px,py,ttext,color = colero,fontsize = 20)

                
    # Save/Show
    if is_save:
        for pic_end in pic_format:
            plt.savefig(pic_dirs[pic_end] + pic_names[enssize]+'.'+pic_end)
            print('Saved as ' + pic_dirs[pic_end] + pic_names[enssize]+'.'+pic_end)

    if is_show:
        plt.show()
    else:
        plt.close()

