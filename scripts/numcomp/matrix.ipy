# Plotting uncertainties in matrices

import os
import matplotlib as mpl
import numpy as np
import exceptions
from mypackage.plot import plotfunctions as pf
from mypackage.plot import plotarrays as pa
from mypackage.run import runmodule as rm
import pandas as pd
from matplotlib import colors	        # Normalize colors (colors.Normalize())

is_wavebc = True
wavebc = 'wavebc_' if is_wavebc else ''

# Show or save pictures
is_show = 1
is_save = 1

# Ensemble sizes to output
enssizes = [50,250]

# Indices/Sorting/Number of methods
indsorts = {50:  [1,6,5,4,3,2,0],
            70:  [1,4,6,5,3,0,2],
            100: [1,4,6,0,3,5,2],
            250: [1,4,3,0,6,2,5],
            500: [1,4,6,0,3,2,5],
            1000:[1,4,6,0,3,2,5],
            2000:[1,4,6,0,3,2,5]}
num_methods = len(indsorts[50])

# Input
statmethod = 'ttest'                       #ttest, gaussian, single
n_syn = 1 if statmethod=='single' else 10  #1(single), 10/100/1000(ttest/gaussian)
probs_names = {enssize :
               'output/numcomp/npy/'+statmethod+'/probs1000_'
               +wavebc
               +str(n_syn).zfill(4)+'_'
               +str(enssize).zfill(4)+'.npy'
               if enssize<500 else
               'output/numcomp/npy/'+statmethod+'/probs_'
               +wavebc
               +str(n_syn).zfill(4)+'_'
               +str(enssize).zfill(4)+'.npy'
               for enssize in enssizes}

# Output 
pic_format = ['pdf','png']
pic_dirs = {pic_end :
            os.environ['HOME']+'/PythonDir/output/numcomp/matrix/'+pic_end[-3:]+'/'
            for pic_end in pic_format}
pic_names = {enssize: 'matrix_'+statmethod+'_'+os.path.basename(os.path.splitext(probs_names[enssize])[0])
             for enssize in enssizes}

# Ticks (names)
ticksize = 20
    
for enssize in enssizes:

    # Load probs
    probs = np.load(probs_names[enssize])
    # Sort probs
    probs = probs[indsorts[enssize],:,:]
    probs = probs[:,indsorts[enssize],:]
    
    # Plot: Figure size and title
    plt.figure(1,figsize=[10,10])
    plt.suptitle("N = "+ str(enssize)+"  Distribution: "+str(n_syn),
                     fontsize = 30)
    # Plot: Axis position and ticks
    ax = plt.subplot(111)
    ax.set_position([0.32,0.2,0.6,0.8])


    # Rectangles in upper right half: Fraction of Undecided
    undecided = probs[:,:,1]
    for ipm in range(num_methods):
        for jpm in range(num_methods):
            if ipm > jpm:
                # Lower left half white
                undecided[ipm,jpm] = None
            if ipm == jpm:
                # Diagonal black
                undecided[ipm,jpm] = 1.0
            if ipm < jpm:
                # Single comparisons white
                if statmethod == 'single':
                    undecided[ipm,jpm] = None
                # One comparison white
                if n_syn == 1000:
                    undecided[ipm,jpm] = None

                    
    im2 = ax.imshow(undecided,interpolation='nearest',cmap='Greys',
                        norm = colors.Normalize(vmin=0,vmax=1,clip=False))
        
    # Triangles: Grid
    X,Y = np.meshgrid(np.arange(8),np.arange(8))
    X = X.flatten()-0.5
    Y = Y.flatten()-0.5

    # Triangles: Indices
    triangles = np.array([[j*8,1+j*8,8+j*8] for j in range(1,num_methods)]
                             +[[1+j*8, 2+j*8, 9+j*8] for j in range(2,num_methods)] 
                             +[[2+j*8, 3+j*8,10+j*8] for j in range(3,num_methods)]
                             +[[3+j*8, 4+j*8,11+j*8] for j in range(4,num_methods)]
                             +[[4+j*8, 5+j*8,12+j*8] for j in range(5,num_methods)]
                             +[[5+j*8, 6+j*8,13+j*8] for j in range(6,num_methods)]
                             +[[1+j*8, 8+j*8, 9+j*8] for j in range(1,num_methods)]
                             +[[2+j*8, 9+j*8,10+j*8] for j in range(2,num_methods)] 
                             +[[3+j*8,10+j*8,11+j*8] for j in range(3,num_methods)]
                             +[[4+j*8,11+j*8,12+j*8] for j in range(4,num_methods)]
                             +[[5+j*8,12+j*8,13+j*8] for j in range(5,num_methods)]
                             +[[6+j*8,13+j*8,14+j*8] for j in range(6,num_methods)])

    # Triangles: Triangulation instance
    tria = mpl.tri.Triangulation(X,Y,triangles)

    # Triangles: Colors
    coleros = np.array([[probs[i,j,0] for i in range(j+1,num_methods)] for j in range(6)]
                           +[[probs[i,j,2] for i in range(j+1,num_methods)] for j in range(6)])
    coleros = np.hstack(coleros)

    # Triangles: Plot with facecolor
    plt.tripcolor(tria,facecolors=coleros,
                    cmap=mpl.cm.Greys,
                    norm = colors.Normalize(vmin=0,vmax=1,clip=False),
                    edgecolor='k')

    # Plot: Mostly ticks
    # plt.title("Significant results")
    plt.xticks(rotation=90)
    ax.set_xticks([i for i in range(num_methods)])
    ax.set_xticklabels(pa.names_methods[indsorts[enssize]], fontsize=ticksize)
    ax.set_yticks([i for i in range(num_methods)])
    ax.set_yticklabels(pa.names_methods[indsorts[enssize]], fontsize=ticksize)
    ax.tick_params(length=0)
    ax.set_frame_on(False)

    # Text: Upper triangles
    for i in range(3):
        for itext in range(num_methods):
            for jtext in range(num_methods):
                if itext<jtext:
                    ntext = 100*probs[jtext,itext,i] if i!=1 else 100*probs[itext,jtext,i]
                    ttext = str(ntext)[0:4] if ntext<100 else str(ntext)[0:3]
                    px = itext-0.35 if i==0 else (jtext-0.125 if i==1 else itext-0.05)
                    py = jtext-0.15 if i==0 else (itext+0.05  if i==1 else jtext+0.3 )
                    colero = 'white' if ntext>50 else 'black'

                    if i!=1 or (statmethod!='single' and n_syn!=1000):
                        plt.text(px,py,ttext,color = colero,fontsize = 10)

                
    # Save/Show
    if is_save:
        for pic_end in pic_format:
            plt.savefig(pic_dirs[pic_end] + pic_names[enssize]+'.'+pic_end)
            print('Saved as ' + pic_dirs[pic_end] + pic_names[enssize]+'.'+pic_end)

    if is_show:
        plt.show()
    else:
        plt.close()

