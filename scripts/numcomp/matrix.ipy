# Plotting uncertainties in matrices

import os
import matplotlib as mpl
import numpy as np
import exceptions
from mypackage.plot import plotfunctions as pf
from mypackage.plot import plotarrays as pa
from mypackage.run import runmodule as rm
import pandas as pd
from matplotlib import colors	        # Normalize colors (colors.Normalize())

# Show or save pictures
is_show = 1
is_save = 1

# Ensemble sizes to output
enssizes = [50,250]

# Indices/Sorting/Number of methods
indsorts = {50:[1,6,5,4,3,2,0],
            70:[1,4,6,5,3,0,2],
            100:[1,4,6,0,3,5,2],
            250:[1,4,6,0,3,2,5]}
num_methods = len(indsorts[50])

# Input
statmethod = 'ttest'                       #ttest, gaussian, single
num_comparisons = 100                      #1(single), 10(ttest/gaussian), 1000(ttest/gaussian)
probs_names = {n_ens :
               'output/numcomp/npy/'+statmethod+'/probs1000_'  
               +str(num_comparisons).zfill(4)+'_'
               +str(n_ens).zfill(4)+'.npy'
               for n_ens in enssizes}

# Output 
pic_name_end = ['eps','png']
pic_dirs = {pic_end :
            os.environ['HOME']+'/PythonDir/output/numcomp/matrix/'+pic_end[-3:]+'/'
            for pic_end in pic_name_end}
pic_names = {n_ens: 'matrix_'+statmethod+probs_names[n_ens][-18:-4]
             for n_ens in enssizes}

# Ticks (names)
names = np.array(pa.names_methods) #if is_1000 else pa.names_methods
yticks = {n_ens : names[indsorts[n_ens]] for n_ens in enssizes}
ticksize = 20
    
for n_ens in enssizes:

    # Load probs
    probs = np.load(probs_names[n_ens])
    # Sort probs
    probs = probs[indsorts[n_ens],:,:]
    probs = probs[:,indsorts[n_ens],:]
    
    # Plot: Figure size and title
    plt.figure(1,figsize=[10,10])
    plt.suptitle("N = "+ str(n_ens)+"  Comparisons: "+str(num_comparisons),
                     fontsize = 30)
    # Plot: Axis position and ticks
    ax = plt.subplot(111)
    ax.set_position([0.32,0.2,0.6,0.8])


    # Rectangles: Fraction of Undecided
    undecided = probs[:,:,1]
    # Rectangles: Remove lower triangle of matrix
    for ipm in range(num_methods):
        for jpm in range(num_methods):
            if ipm > jpm:
                undecided[ipm,jpm] = None
            if ipm == jpm:
                undecided[ipm,jpm] = 1.0

    im2 = ax.imshow(undecided,interpolation='nearest',cmap='Greys',
                     norm = colors.Normalize(vmin=0,vmax=1,clip=False))

    # Triangles: Grid
    X,Y = np.meshgrid(np.arange(8),np.arange(8))
    X = X.flatten()-0.5
    Y = Y.flatten()-0.5

    # Triangles: Indices
    triangles = np.array([[i*8,1+i*8,8+i*8] for i in range(1,num_methods)]
                             +[[1+j*8, 2+j*8, 9+j*8] for j in range(2,num_methods)] 
                             +[[2+j*8, 3+j*8,10+j*8] for j in range(3,num_methods)]
                             +[[3+j*8, 4+j*8,11+j*8] for j in range(4,num_methods)]
                             +[[4+j*8, 5+j*8,12+j*8] for j in range(5,num_methods)]
                             +[[5+j*8, 6+j*8,13+j*8] for j in range(6,num_methods)]
                             +[[1+j*8, 8+j*8, 9+j*8] for j in range(1,num_methods)]
                             +[[2+j*8, 9+j*8,10+j*8] for j in range(2,num_methods)] 
                             +[[3+j*8,10+j*8,11+j*8] for j in range(3,num_methods)]
                             +[[4+j*8,11+j*8,12+j*8] for j in range(4,num_methods)]
                             +[[5+j*8,12+j*8,13+j*8] for j in range(5,num_methods)]
                             +[[6+j*8,13+j*8,14+j*8] for j in range(6,num_methods)])

    # Triangles: Triangulation instance
    tria = mpl.tri.Triangulation(X,Y,triangles)

    # Triangles: Colors
    coleros = np.array([[probs[i,j,0] for i in range(j+1,num_methods)] for j in range(6)]
                           +[[probs[i,j,2] for i in range(j+1,num_methods)] for j in range(6)])
    coleros = np.hstack(coleros)

    # Triangles: Plot with facecolor
    plt.tripcolor(tria,facecolors=coleros,
                    cmap=mpl.cm.Greys,
                    norm = colors.Normalize(vmin=0,vmax=1,clip=False),
                    edgecolor='k')

    # Plot: Mostly ticks
    plt.title("Significant results")
    plt.xticks(rotation=90)
    ax.set_xticks([i for i in range(num_methods)])
    ax.set_xticklabels(yticks[n_ens], fontsize=ticksize)
    ax.set_yticks([i for i in range(num_methods)])
    ax.set_yticklabels(yticks[n_ens], fontsize=ticksize)
    ax.tick_params(length=0)
    ax.set_frame_on(False)

    # Text: Upper triangles
    for i in range(3):
        for itext in range(num_methods):
            for jtext in range(num_methods):
                if itext<jtext:
                    ntext = 100*probs[jtext,itext,i] if i!=1 else 100*probs[itext,jtext,i]
                    ttext = str(ntext)[0:4] if ntext<100 else str(ntext)[0:3]
                    px = itext-0.35 if i==0 else (jtext-0.125 if i==1 else itext-0.05)
                    py = jtext-0.15 if i==0 else (itext+0.05  if i==1 else jtext+0.3 )
                    colero = 'white' if ntext>50 else 'black'
                    
                    plt.text(px,py,ttext,color = colero,fontsize = 10)

                
    # Save/Show
    if is_save:
        for pic_end in pic_name_end:
            plt.savefig(pic_dirs[pic_end] + pic_names[n_ens]+'.'+pic_end)
            print('Saved as ' + pic_dirs[pic_end] + pic_names[n_ens]+'.'+pic_end)

    if is_show:
        plt.show()
    else:
        plt.close()

