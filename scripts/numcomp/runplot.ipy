import shutil
import numpy as np
import matplotlib.pyplot as plt

import mypackage.numcomp.arrays as na
import mypackage.numcomp.plot as npl
import mypackage.numcomp.read as nr
import mypackage.run.pythonmodule as pm

# Switches
is_read = 0
is_backup = 0
is_plot = 0
is_matrix = 1
is_save = 0
is_show = 1

which_methods = [0,1,2,3,4,5,6]
model = 'wavebc'

# Read
if is_read:
    probs_array, probs_array_name = nr.read(
        which_methods = which_methods,
        model = model,
        enssize = 250,
        n_syn = 10,
        n_comparisons = 10000,
        method = 'ttest',
        )

    np.save(probs_array_name,probs_array)
    print('Saved as ' + probs_array_name)

# Plot
if is_plot:

    # Figure
    fig = plt.figure('numcomp',figsize=[12,6])
    fig.suptitle("Comparisons",fontsize=30,y=0.95)

    # Run plot function
    ax, pic_name = npl.plot(fig.add_subplot(1,1,1),
                            which_methods = which_methods,
                            which_methods_left = [1,4,6,0,3,2],
                            which_methods_right = [4,6,0,3,2,5],
                            n_comparisons = 1000,
                            )

    # Save
    if is_save:
        plt.savefig(pic_name)
        print('Saved as ' + pic_name)

    # Show
    if is_show:
        plt.show()
    else:
        plt.clf()

# Matrix
if is_matrix:

    enssize = 250
    n_syn = 10

    # Figure
    fig = plt.figure('numcomp',figsize=[10,10])
    plt.suptitle("N = "+ str(enssize)+"  Distribution: "+str(n_syn),
                 fontsize = 30)

    # Run plot function
    ax, pic_name = npl.matrix(fig.add_subplot(1,1,1),
                            which_methods = which_methods,
                            indsorts = [1,4,3,0,6,2,5],
                            enssize = enssize,
                            n_syn = n_syn,
                            n_comparisons = 10000,
                            xtick_y = 0.0,
                            )

    # Save
    if is_save:
        plt.savefig(pic_name)
        print('Saved as ' + pic_name)

    # Show
    if is_show:
        plt.show()
    else:
        plt.clf()

# Backup
if is_backup:
    pm.py_backup(pm.python_scripts_dir,na.tag,"runplot","ipy",model,'_'.join([str(i) for i in which_methods])[:],'2017_10_06_p1_fig9')
