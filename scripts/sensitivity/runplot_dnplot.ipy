import shutil
import matplotlib.pyplot as plt

from pskf.tools.plot import specs as sc
import pskf.scripts.sensitivity.arrays as sa
import pskf.scripts.sensitivity.variables as sv
import pskf.scripts.sensitivity.plot as spl
import pskf.scripts.sensitivity.read as sr
import pskf.scripts.forward.plot as fp
import pskf.tools.run.pythonmodule as pm

# Switches
is_dnplot = 1
is_save = 1
is_show = 0
is_backup = 1

# Specs
model_name = 'cubey'

# Figure
fig = plt.figure(1,[20,12],facecolor = 'white')

# NPlot
if is_dnplot:

    colors = ['black','red','blue','green','yellow','grey']
    maskvalues = [1,2,7]

    for j, imons in enumerate([
        [0,8],
        [1,9],
        ]):                               #[0,1,8,9]

        for i,[dat,let] in enumerate([
            ['2017_05_31','b'],
            ['2017_05_31','aln'],
            ['2017_05_31','bxz']
            ]):

            # Run dnplot function
            ax, pic_name = spl.dnplot(
                fig.add_subplot(1,3*j+1,1),
                model_name,
                dat,
                let,
                title = "Sensitivity Scores (dT): Thermal Conductivity" if j == 0 else "",
                ylims= [-1.2,1.2],
                color = colors[i],
                is_legend = False,
                imons = imons,
                # is_fourier = True,
                pic_format = 'png',
                position = [
                        0.1*0.4,
                        1-(j+1)*0.5000+0.1*0.5000,   # Top - # of thirds + margin
                        0.8*0.4,
                        0.8*0.5000
                        ],
                )

        for i,[dat,let] in enumerate([
            ['2017_05_31','dkl'],
            ['2017_05_31','ewx'],
            ['2017_05_31','gjj'],
            ]):

            # Run dnplot function
            ax, pic_name = spl.dnplot(
                fig.add_subplot(1,100+3*j+1,1),
                model_name,
                dat,
                let,
                title = "Sensitivity Scores (dT): Volumetric Heat Capacity" if j == 0 else "",
                ylims= [-0.0,0.13],
                color = colors[i],
                is_legend = False,
                imons = imons,
                # is_fourier = True,
                position = [
                    0.6+0.1*0.4,
                    1-(j+1)*0.5000+0.1*0.5000,   # Top - # of thirds + margin
                    0.8*0.4,
                    0.8*0.5000
                    ],
                )

        # Uindex plot function
        ax3, pic_name_3  = fp.plot(
                fig.add_subplot(1,3*j+3,1),
                model_name,
                "2017_02_08",
                "aln",
                varname = 'uindex',
                position = [
                        0.7*0.4,
                        1-(j+1)*0.5+0.65*0.5,
                        0.18*1.0*0.4,
                        0.10666*1.0],
                alpha = 0.5,
                loc_inds = [imons],
                marker = 'o',
                markersize = 30.0,
                markercolor = 'black',
                markeralpha = 1.0,
                is_labels=False,
                is_mask = False,
                is_grid = False,
                )

        # Uindex plot function
        ax3, pic_name_3  = fp.plot(
                fig.add_subplot(1,100+3*j+3,1),
                model_name,
                "2017_02_08",
                "aln",
                varname = 'uindex',
                position = [
                        0.6+0.7*0.4,
                        1-(j+1)*0.5+0.65*0.5,
                        0.18*1.0*0.4,
                        0.10666*1.0],
                alpha = 0.5,
                loc_inds = [imons[0],imons[1]],
                marker = 'o',
                markersize = 30.0,
                markercolor = 'black',
                markeralpha = 1.0,
                is_labels=False,
                is_mask = False,
                is_grid = False,
                )

    for j in range(3):
        # Uindex plot function
        ax2, pic_name_2  = fp.plot(
                fig.add_subplot(1,3*j+2,1),
                model_name,
                "2017_02_08",
                "aln",
                varname = 'uindex',
                position = [
                        0.4+0.3*0.2,
                        1-(j+1)*0.3333+0.3*0.3333,
                        0.18*0.4*1.117,
                        0.10666*1.117],
                alpha = 0.5,
                is_ownlocs = True,
                ownlocs = [
                        [3,3,1]
                        ],
                loc_inds = [0],
                marker = 'o',
                markersize = 1000.0,
                markercolor = colors[j],
                markeralpha = 1.0,
                is_labels=False,
                is_mask = True,
                maskvalue = maskvalues[j],
                is_grid = False,
                )


    # Save
    if is_save:
        plt.savefig(pic_name)
        print('Saved as ' + pic_name)

    # Show
    if is_show:
        plt.show()
    else:
        plt.clf()

# Backup
if is_backup:
    pm.py_backup(
        pm.python_scripts_dir,
        sv.tag,
        "runplot_dnplot",
        "ipy",
        sc.specl(model_name,
                 dat,
                 let)
    )
