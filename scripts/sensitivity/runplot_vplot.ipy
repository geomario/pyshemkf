import shutil
import matplotlib.pyplot as plt

from mypackage.plot import specs as sc
from mypackage.run import runmodule as rm
import mypackage.sensitivity.arrays as sa
import mypackage.sensitivity.plot as spl
import mypackage.forward.plot as fp
import mypackage.sensitivity.read as sr
import mypackage.run.pythonmodule as pm

# Switches
is_dplot = 1
is_save = 1
is_show = 0
is_backup = 1

# Specs
model_name = 'cubey'
dat = '2017_02_02'
let = 'dr'

# DPlot
if is_dplot:

    # Figure
    fig = plt.figure(1,[16,16], facecolor = 'white')

    for ipl, imons in enumerate([
        [0,4],
        [1,5],
        [2,6],
        [3,7],
        [8,12],
        [9,13],
        [10,14],
        [11,15],
        ]):

        # Run dplot function
        ax, pic_name = spl.dplot(
            fig.add_subplot(1,1+ipl,1),
            model_name,
            dat,
            let,
            imons = imons,
            ylims = [-0.1,2.5],
            title = '',
            position = [
                0.1*0.5+(ipl/4)*0.5,
                0.1*0.25+1-(np.mod(ipl,4)+1)*0.25,
                0.8*0.5,
                0.8*0.25
                ],
            is_text_def = False,
            )

        # Uindex plot function
        ax2, pic_name_2  = fp.plot(
            fig.add_subplot(1,100+ipl,1),
            model_name,
            "2017_02_08",
            "aln",
            varname = 'uindex',
            position = [
                0.15*0.5+(ipl/4)*0.5,
                0.35*0.25+1-(np.mod(ipl,4)+1)*0.25,
                0.216*0.5,
                0.384*0.25],
            alpha = 0.5,
            loc_inds = imons,
            marker = 'o',
            markersize = 4.0,
            markercolor = ['black','red'],
            is_labels=False,
            # is_mask = True,
            is_grid = False,
            # maskvalue=sa.unit_numbers[sc.specl(model_name,dat,let)]
            )


    # Save
    if is_save:
        plt.savefig(pic_name)
        print('Saved as ' + pic_name)

    # Show
    if is_show:
        plt.show()
    else:
        plt.clf()


# Backup
if is_backup:
    pm.py_backup(pm.python_scripts_dir,sa.tag,"runplot_vplot","ipy",model_name,dat,let)
