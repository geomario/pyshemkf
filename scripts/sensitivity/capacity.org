------------------------------------------------------
Sensitivity analysis for volumetric heat capacities
------------------------------------------------------

#+BEGIN_SRC ipython :session 
  %matplotlib inline
  import matplotlib.pyplot as plt
  import numpy as np

  import sys
  import os
  os.chdir("/home/jk125262/PythonDir")
  from mypackage.plot import specs as sc
  from mypackage.run import runmodule as rm
#+END_SRC

#+RESULTS:

* Outer volumetric heat capacity

Run read.ipy at least once!

** Sensitivity matrix 

Calculate the sensitivty matrix (sense) at different time points
- sense[it,imon,ilet]
  - it: Time index
  - imon: Monitoring point (0:8 outer, 8:16 inner)
  - ilet: Different runs with different volumetric heat capacities

#+BEGIN_SRC ipython :session   :exports both
  sc.model_name = 'cubey'

  sc.truedat = '2017_01_15'
  sc.truelet = 'a'

  sc.dat = '2017_01_15'
  sc.lets = [rm.get_let_num(i) for i in range(1000)]

  num_mons = sc.num_mons(sc.model_name,sc.dat,sc.lets[0])
  sense = np.zeros([5,num_mons,len(sc.lets)])

  l = np.arange(0.5,3.5,0.003)

  for i,let in enumerate(sc.lets):
    temp = np.load('output/sensitivity/npy/truetemp_'+sc.model_name+'_'+sc.dat+'_'+let+'.npy')

    sense[:,:,i] = temp[[350,375,400,425,500],:]
    t = np.load('output/sensitivity/npy/truet_'+sc.model_name+'_'+sc.dat+'_'+let+'.npy')[[350,375,400,425,500]]

  np.save('output/sensitivity/npy/sense_'+sc.model_name+'_'+sc.dat+'_'+sc.lets[0]+'.npy',sense)
  sense.shape
#+END_SRC

#+RESULTS:
| 5 | 16 | 1000 |


** Plot of temperature change

#+BEGIN_SRC ipython :session :file /home/jk125262/PythonDir/output/tmp/py63869ANw.png :exports both
  sc.model_name = 'cubey'

  sc.truedat = '2017_01_15'
  sc.truelet = 'a'

  sc.dat = '2017_01_15'
  sc.lets = [rm.get_let_num(i) for i in range(1000)]


  sense = np.load('output/sensitivity/npy/sense_'+sc.model_name+'_'+sc.dat+'_'+sc.lets[0]+'.npy')


  plt.figure(1,[10,4], dpi=200, facecolor = 'white')
  #plt.title('Temperature vs Volumetric Heat Capacity', size = 12)
  plt.xlabel(r'Volumetric Heat Capacity [$ 10^{6} \frac{J}{m^{3}\cdot K}$]',fontsize = 14, labelpad=10)
  plt.ylabel(r'Temperature [$^{\circ}C$]',fontsize = 14)

  #plt.gca().xaxis.set_ticks([10,60,600,3600,24*3600,10*24*3600])
  #plt.gca().xaxis.set_ticklabels(['10s','1min','10min','1h','1d','10d'])

  #plt.xlim(xlims[0],xlims[1])
  #plt.ylim(13.9,15.0)

  plt.plot(l,sense[0,0,:])
  plt.plot(l,sense[1,0,:])
  plt.plot(l,sense[2,0,:])
  plt.plot(l,sense[3,0,:])
  plt.plot(l,sense[4,0,:])
#+END_SRC

#+RESULTS:
[[file:/home/jk125262/PythonDir/output/tmp/py63869ANw.png]]

** Temperature differences 
#+BEGIN_SRC ipython :session   :exports both
  [str(sense[i,0,-1]-sense[i,0,0]) for i in [0,1,2]]
#+END_SRC

#+RESULTS:
| 0.463538 | 0.656499 | 0.0 |

* Ring volumetric heat capacity I

Run read.ipy at least once!

** Sensitivity matrix 

Calculate the sensitivty matrix (sense) at different time points
- sense[it,imon,ilet]
  - it: Time index
  - imon: Monitoring point (0:8 outer, 8:16 inner)
  - ilet: Different runs with different volumetric heat capacities

#+BEGIN_SRC ipython :session   :exports both
  sc.model_name = 'cubey'

  sc.truedat = '2017_01_16'
  sc.truelet = 'a'

  sc.dat = '2017_01_16'
  sc.lets = [rm.get_let_num(i) for i in range(1000)]

  num_mons = sc.num_mons(sc.model_name,sc.dat,sc.lets[0])
  sense = np.zeros([3,num_mons,len(sc.lets)])

  l = np.arange(0.5,3.5,0.003)

  for i,let in enumerate(sc.lets):
    temp = np.load('output/sensitivity/npy/truetemp_'+sc.model_name+'_'+sc.dat+'_'+let+'.npy')

    sense[:,:,i] = temp[[200,350,500],:]

  np.save('output/sensitivity/npy/sense_'+sc.model_name+'_'+sc.dat+'_'+sc.lets[0]+'.npy',sense)
  sense.shape
#+END_SRC

#+RESULTS:
| 3 | 16 | 1000 |

** Plot

#+BEGIN_SRC ipython :session :file /rwthfs/rz/cluster/home/jk125262/PythonDir/output/tmp/py23473SdI.png :exports both
  sc.model_name = 'cubey'

  sc.truedat = '2017_01_16'
  sc.truelet = 'a'

  sc.dat = '2017_01_16'
  sc.lets = [rm.get_let_num(i) for i in range(1000)]


  sense = np.load('output/sensitivity/npy/sense_'+sc.model_name+'_'+sc.dat+'_'+sc.lets[0]+'.npy')


  plt.figure(1,[10,4], dpi=200, facecolor = 'white')
  #plt.title('Temperature vs Volumetric Heat Capacity', size = 12)
  plt.xlabel(r'Volumetric Heat Capacity [$ 10^{6} \frac{J}{m^{3}\cdot K}$]',fontsize = 14, labelpad=10)
  plt.ylabel(r'Temperature [$^{\circ}C$]',fontsize = 14)

  #plt.gca().xaxis.set_ticks([10,60,600,3600,24*3600,10*24*3600])
  #plt.gca().xaxis.set_ticklabels(['10s','1min','10min','1h','1d','10d'])

  #plt.xlim(xlims[0],xlims[1])

  # plt.plot(l,sense[0,0,:])
  plt.plot(l,sense[1,0,:])
  plt.plot(l,sense[2,0,:])
#+END_SRC

#+RESULTS:
[[file:/rwthfs/rz/cluster/home/jk125262/PythonDir/output/tmp/py23473SdI.png]]

* Ring heat volumetric heat capacity II

Run read.ipy at least once!

** Sensitivity matrix 

Calculate the sensitivty matrix (sense) at different time points
- sense[it,imon,ilet]
  - it: Time index
  - imon: Monitoring point (0:8 outer, 8:16 inner)
  - ilet: Different runs with different volumetric heat capacities

#+BEGIN_SRC ipython :session   :exports both
  sc.model_name = 'cubey'

  sc.truedat = '2017_01_16'
  sc.truelet = 'aln'

  sc.dat = '2017_01_16'
  sc.lets = [rm.get_let_num(i) for i in range(1000)]

  num_mons = sc.num_mons(sc.model_name,sc.dat,sc.lets[0])
  sense = np.zeros([3,num_mons,len(sc.lets)])

  l = np.arange(0.5,3.5,0.003)

  for i,let in enumerate(sc.lets):
    temp = np.load('output/sensitivity/npy/truetemp_'+sc.model_name+'_'+sc.dat+'_'+let+'.npy')

    sense[:,:,i] = temp[[200,350,500],:]

  np.save('output/sensitivity/npy/sense_'+sc.model_name+'_'+sc.dat+'_'+sc.lets[0]+'.npy',sense)
  sense.shape
#+END_SRC

#+RESULTS:
| 3 | 16 | 1000 |
** Plot

#+BEGIN_SRC ipython :session :file /rwthfs/rz/cluster/home/jk125262/PythonDir/output/tmp/py23473sxU.png :exports both
  sc.model_name = 'cubey'

  sc.truedat = '2017_01_16'
  sc.truelet = 'aln'

  sc.dat = '2017_01_16'
  sc.lets = [rm.get_let_num(i) for i in range(1000)]


  sense = np.load('output/sensitivity/npy/sense_'+sc.model_name+'_'+sc.dat+'_'+sc.lets[0]+'.npy')


  plt.figure(1,[10,4], dpi=200, facecolor = 'white')
  #plt.title('Temperature vs Volumetric Heat Capacity', size = 12)
  plt.xlabel(r'Volumetric Heat Capacity [$ 10^{6} \frac{J}{m^{3}\cdot K}$]',fontsize = 14, labelpad=10)
  plt.ylabel(r'Temperature [$^{\circ}C$]',fontsize = 14)

  #plt.gca().xaxis.set_ticks([10,60,600,3600,24*3600,10*24*3600])
  #plt.gca().xaxis.set_ticklabels(['10s','1min','10min','1h','1d','10d'])

  #plt.xlim(xlims[0],xlims[1])

  # plt.plot(l,sense[0,0,:])
  plt.plot(l,sense[1,0,:])
  plt.plot(l,sense[2,0,:])

#+END_SRC

#+RESULTS:
[[file:/rwthfs/rz/cluster/home/jk125262/PythonDir/output/tmp/py23473sxU.png]]

* Tube volumetric heat capacity

Run read.ipy at least once!

** Sensitivity matrix 

Calculate the sensitivty matrix (sense) at different time points
- sense[it,imon,ilet]
  - it: Time index
  - imon: Monitoring point (0:8 outer, 8:16 inner)
  - ilet: Different runs with different volumetric heat capacities

#+BEGIN_SRC ipython :session   :exports both
  sc.model_name = 'cubey'

  sc.truedat = '2017_01_16'
  sc.truelet = 'bxz'

  sc.dat = '2017_01_16'
  sc.lets = [rm.get_let_num(i) for i in range(1000)]

  num_mons = sc.num_mons(sc.model_name,sc.dat,sc.lets[0])
  sense = np.zeros([3,num_mons,len(sc.lets)])

  l = np.arange(0.5,3.5,0.003)

  for i,let in enumerate(sc.lets):
    temp = np.load('output/sensitivity/npy/truetemp_'+sc.model_name+'_'+sc.dat+'_'+let+'.npy')

    sense[:,:,i] = temp[[200,350,500],:]

  np.save('output/sensitivity/npy/sense_'+sc.model_name+'_'+sc.dat+'_'+sc.lets[0]+'.npy',sense)
  sense.shape
#+END_SRC

#+RESULTS:
| 3 | 16 | 1000 |

** Plot

#+BEGIN_SRC ipython :session :file /rwthfs/rz/cluster/home/jk125262/PythonDir/output/tmp/py23473GGh.png :exports both
  sc.model_name = 'cubey'

  sc.truedat = '2017_01_16'
  sc.truelet = 'bxz'

  sc.dat = '2017_01_16'
  sc.lets = [rm.get_let_num(i) for i in range(1000)]


  sense = np.load('output/sensitivity/npy/sense_'+sc.model_name+'_'+sc.dat+'_'+sc.lets[0]+'.npy')


  plt.figure(1,[10,4], dpi=200, facecolor = 'white')
  #plt.title('Temperature vs Volumetric Heat Capacity', size = 12)
  plt.xlabel(r'Volumetric Thermal Capacity [$ 10^{6} \frac{J}{m^{3}\cdot K}$]',fontsize = 14, labelpad=10)
  plt.ylabel(r'Temperature [$^{\circ}C$]',fontsize = 14)

  #plt.gca().xaxis.set_ticks([10,60,600,3600,24*3600,10*24*3600])
  #plt.gca().xaxis.set_ticklabels(['10s','1min','10min','1h','1d','10d'])

  #plt.xlim(xlims[0],xlims[1])

  # plt.plot(l,sense[0,0,:])
  plt.plot(l,sense[1,0,:])
  plt.plot(l,sense[2,0,:])

#+END_SRC

#+RESULTS:
[[file:/rwthfs/rz/cluster/home/jk125262/PythonDir/output/tmp/py23473GGh.png]]

