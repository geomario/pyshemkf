###############################################################################
#                              Sensitivity curves                             #
###############################################################################

import numpy as np
import sensitivityarrays as sa
from mypackage.plot import specs as sc
from mypackage.run import pythonmodule as pm

# Monitoring point ############################################################
imons = 9

nruns = [0,1,2]                 # range(len(sa.runs))

for i, irun in enumerate(nruns):

    # Output specifiers #######################################################
    model_name = sa.runs[irun][0] #'cubey'
    dat = sa.runs[irun][1] #'2017_01_15'
    let = rm.get_let_num(sa.runs[irun][2][0]) # range(1000)

    # Load array ##############################################################
    sense = np.load(pm.py_output_filename(sa.tag,
                                          "sense",
                                          sc.specl(model_name,dat,let),
                                          "npy"))

    # Initialize array ########################################################
    if i == 0:
        numsense = np.zeros([sc.nt(model_name,dat,let),
                             len(nruns)])
        numsense_labels = ["" for j in range(len(nruns))]

    ###########################################################################
    #                               Calculation                               #
    ###########################################################################
    # Difference of outermost points: Find the right variation interval #######
    numsense[:,i] = sense[:,imons,-1] - sense[:,imons,0]
    numsense_labels[i] = sa.sensitivity_varnames[sc.specl(model_name,dat,let)] \
                            + ", Unit:"+ str(sa.unit_numbers[sc.specl(model_name,dat,let)])

# Save the array ##############################################################
np.save(pm.py_simple_output_filename("numsense_"+str(imons).zfill(2),sa.tag,"npy"),
        numsense)
np.save(pm.py_simple_output_filename("numsense_labels_"+str(imons).zfill(2),sa.tag,"npy"),
        numsense_labels)


