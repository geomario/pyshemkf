###############################################################################
#                              Sensitivity curves                             #
###############################################################################

import numpy as np
import sensitivityarrays as sa
from mypackage.plot import specs as sc
from mypackage.run import pythonmodule as pm

# Monitoring point ############################################################
imons = 0

for irun in range(len(sa.runs)):

    # Output specifiers #######################################################
    model_name = sa.runs[irun][0] #'cubey'
    dat = sa.runs[irun][1] #'2017_01_15'
    lets = [rm.get_let_num(i) for i in sa.runs[irun][2]] # range(1000)

    # Load array ##############################################################
    sense = np.load(pm.py_output_filename(sa.tag,
                                          "sense",
                                          sc.specl(model_name,dat,lets[0]),
                                          "npy"))

    # Initialize array ########################################################
    if irun == 0:
        numsense = np.zeros([sc.nt(model_name,dat,lets[0]),
                             len(sa.runs)])
        numsense_labels = ["" for i in range(len(sa.runs))]

    ###########################################################################
    #                               Calculation                               #
    ###########################################################################
    # Difference of outermost points: Find the right variation interval #######
    numsense[:,irun] = sense[:,imons,-1] - sense[:,imons,0]
    numsense_labels[irun] = sa.sensitivity_varnames[sc.specl(model_name,dat,lets[0])] \
                            + ", Unit:"+ str(sa.unit_numbers[sc.specl(model_name,dat,lets[0])])

# Save the array ##############################################################
np.save(pm.py_simple_output_filename("numsense_"+str(imons).zfill(2),sa.tag,"npy"),
        numsense)
np.save(pm.py_simple_output_filename("numsense_labels_"+str(imons).zfill(2),sa.tag,"npy"),
        numsense_labels)


