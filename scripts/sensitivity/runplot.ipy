import shutil
import matplotlib.pyplot as plt

from mypackage.plot import specs as sc
import mypackage.sensitivity.arrays as sa
import mypackage.sensitivity.plot as spl
import mypackage.sensitivity.read as sr
import mypackage.run.pythonmodule as pm

# Switches
is_read = 0
is_plot = 0
is_mix = 0
is_save = 0
is_show = 0
is_backup = 0

# 'cubey_2017_01_15_a'
# 'cubey_2017_01_31_a'
# 'cubey_2017_01_31_aln'
# 'cubey_2017_01_30_a'
# 'cubey_2017_01_30_aln'
# 'cubey_2017_01_30_bxz'

# Specs
sc.model_name = 'cubey'

sc.dat = '2017_01_15'
let = 'a'
nl = 1000
ns = rm.get_num_let(let)
sc.lets = [rm.get_let_num(i) for i in range(ns,ns+nl)]

nstep = 10
sa.senselets = [rm.get_let_num(int(i+rm.get_num_let(let))) for i in np.round(np.linspace(np.searchsorted(sa.varranges[sc.spec()],sa.varranges_sense[sc.spec()][0]),
                                                                     np.searchsorted(sa.varranges[sc.spec()],sa.varranges_sense[sc.spec()][1])-1,

                                                                                         nstep))]

# Read
if is_read:
    for il, let in enumerate(sa.senselets):

        if let == sa.senselets[0]:
            t, t_name = sr.read(sc.model_name,sc.dat,let,varname ="t")

            # Save
            np.save(t_name,t)
            print('Saved as ' + t_name)

        temp, temp_name = sr.read(sc.model_name,sc.dat,let,varname ="temp")

        # Save
        np.save(temp_name,temp)
        print('Saved as ' + temp_name)
        
# Mix
if is_mix:
    sense, sense_name = sr.mix(sc.model_name,sc.dat,sa.senselets)

    # Save
    np.save(sense_name,sense)
    print('Saved as ' + sense_name)

# Plot
if is_plot:

    # Figure
    fig = plt.figure(1,figsize=[8,4], dpi=200, facecolor = 'white')
    ax = fig.add_subplot(111)

    # Run plot function
    ax, pic_name = spl.plot(ax,sc.model_name,sc.dat,sc.lets[0]) 

    # Save
    if is_save:
        plt.savefig(pic_name)
        print('Saved as ' + pic_name)

    # Show
    if is_show:
        plt.show()
    else:
        plt.clf()

# Backup
if is_backup:
    pm.py_script_backup(sa.tag,"runplot","ipy",sc.model_name,sc.dat,sc.lets[0])
        
