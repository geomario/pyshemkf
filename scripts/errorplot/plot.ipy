# Errorplot: Plot of Means + Errors (for ensemble sizes)

import os
import matplotlib as mpl
import numpy as np
from mypackage.plot import plotfunctions
from mypackage.plot import plotarrays as pa
from mypackage.run import runmodule as rm
import pandas as pd


# ------------------------ MANUAL INPUT ---------------------------------------
# Content
is_1000 = True                      # 1000er or 100er job
is_median = 0                       # 1: Median, 0: Mean
is_nooutlier = 0                    # 1: Outliers disregarded
which_enssize =  [50,70,100,250] if is_1000 else [50,70,100,250,500,1000,2000] # [50,100,250,500,1000,2000] 
## Only changes filename, input order always the same

# Figure
is_std = 0                                   # Show std?
is_show = 1                                  # Print figure on screen?
is_save = 1                                  # Save figure to file?
pic_name_start = 'ENDMEANS'
pic_name_end = '.eps'                         #'png' or 'eps' or 'svg'
pic_dir = '/home/jk125262/PythonDir/output/errorplot/'+pic_name_end[-3:]+'/'

# Y-Axis limits for the six plots
ylims_all = [[0.32,0.73],[0.32,0.73],[0.32,0.73],
             [0.32,0.73],[0.32,0.73],[0.32,0.73],
             [0.32,0.73]]
yticks = [0.4,0.5,0.6,0.7]

# Number of methods in pack
num_pack = 4

# Format
formatsos = ['o','v','s','p','o','v','s']
coleros = [(0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0),
               (1.0,1.0,1.0),(1.0,1.0,1.0),(1.0,1.0,1.0)]
markersize = 10
markeredgesize = 1.5

# Fonts
fontleg = 30                              #18
fonttit = 40
dfontlab = 40
fonttic = 30

# Figure size/position
figsize = [18,10]                         #xsize, ysize
figpos = [0.15,0.3,0.8,0.6]               #xbeg, ybeg, xrange, yrange


# Picture name
if is_1000:
    if is_nooutlier:
        pic_name_start = pic_name_start + '_NOOUTLIER1000_'
    else:
        pic_name_start = pic_name_start + '1000_'
else:
    if is_nooutlier:
        pic_name_start = pic_name_start + '_NOOUTLIER_'
    else:
        pic_name_start = pic_name_start + '_'

if is_median:
    pic_name_start = pic_name_start + 'MEDIAN_'
        
# -------------------------------- LOAD ---------------------------------

# Number of Methods in endres_mean
num_methods = endres_mean.shape[0]

load_dir = 'output/errorplot/npy/'

if is_1000:
    # Legend input (from endresmeans_allread.ipy)
    legend_input = np.load(load_dir+'legend_input1000.npy')

    # INPUT from read.ipy
    if is_nooutlier:
        endres_mean = np.load(load_dir+'endres_mean_nooutliers1000.npy') # A(mtds, enssizes)
        endres_std = np.load(load_dir+'endres_std_nooutliers1000.npy')
        nums = np.load(load_dir+'nums1000.npy')[0:num_methods,:] \
          -np.load(load_dir+'outliersbeg1000.npy')
    else:
        endres_mean = np.load(load_dir+'endres_mean1000.npy')   # A(methods, ensemble sizes)
        endres_std = np.load(load_dir+'endres_std1000.npy')
        nums = np.load(load_dir+'nums1000.npy')[0:num_methods,:]
        
    if is_median:
        endres_median = np.load(load_dir+'endres_median1000.npy')
        endres_q1 = np.load(load_dir+'endres_q11000.npy')
        endres_q3 = np.load(load_dir+'endres_q31000.npy')

else:
    # Legend input (from endresmeans_allread.ipy)
    legend_input = np.load(load_dir+'legend_input1000.npy') # 1000 !!!!!!!!!!!!!!!!

    # INPUT from endresmeans_allread.ipy
    if is_nooutlier:
        endres_mean = np.load(load_dir+'endres_mean_nooutliers.npy') # A(methods, enssizes)
        endres_std = np.load(load_dir+'endres_std_nooutliers.npy')
        nums = np.load(load_dir+'nums.npy')[0:num_methods,:] \
          -np.load(load_dir+'outliersbeg.npy')
    else:
        # Load arrays (endresmeans_allread.ipy)
        endres_mean = np.load(load_dir+'endres_mean.npy')   # A(methods, ensemble sizes)
        endres_std = np.load(load_dir+'endres_std.npy')
        nums = np.load(load_dir+'nums.npy')[0:num_methods,:]

    if is_median:
        endres_median = np.load(load_dir+'endres_median.npy')
        endres_q1 = np.load(load_dir+'endres_q1.npy')
        endres_q3 = np.load(load_dir+'endres_q3.npy')

    
# Standard deviation of the mean
endres_meanstd = endres_std/np.sqrt(nums)


# -------------------------- SORT ---------------------------------------
sort_array = np.load(load_dir+'endres_mean1000.npy')[:,0]
indsort = np.argsort(sort_array)

# # 250er order
# indsort = np.array([1, 4, 6, 0, 3, 2, 5])
# indsortos = np.array([0,3,1,6,4,5,2])
# formatsos = np.array(formatsos)[indsortos]
# coleros = np.array(coleros)[indsortos]

legend_input = np.array(legend_input)[indsort]
for i in range(endres_mean.shape[1]):
    endres_mean[:,i] = endres_mean[:,i][indsort]
    endres_std[:,i] = endres_std[:,i][indsort]
    endres_meanstd[:,i] = endres_meanstd[:,i][indsort]
    if is_median:
        endres_median[:,i] = endres_median[:,i][indsort]
        endres_q1[:,i] = endres_q1[:,i][indsort]
        endres_q3[:,i] = endres_q3[:,i][indsort]


# -------------------------------- PLOT --------------------------------
for ienssize,ensemble_size in enumerate(which_enssize):


    # Figure
    plt.figure('Errorplot',figsize)
    plt.gca().set_prop_cycle("color",['k'])
    plt.gca().set_position(figpos)

    # x positions, up to 15 methods
    x = np.delete(np.arange(0,16),                               
                  np.arange(0,16,num_pack+1)) #Skip every (num_pack+1)-th
    ylims = ylims_all[ienssize]                             #y: Limits

    # Values/errors to plot
    if is_median:
        endres_plot = endres_median[:,ienssize]
        endres_std_plot = [endres_median[:,ienssize]-endres_q1[:,ienssize],
                           endres_q3[:,ienssize]-endres_median[:,ienssize]]
        endres_std_plot = np.transpose(endres_std_plot)
    else:
        endres_plot = endres_mean[:,ienssize]
        endres_std_plot = endres_meanstd[:,ienssize]

    # Plot
    puntos = []                            #Contains plotted points
    for iplot in range(num_methods):
        punto, = plt.plot(x[iplot],endres_plot[iplot], formatsos[iplot], lw = 2, ms = markersize,
                         label = legend_input[iplot], c = coleros[iplot],mew =markeredgesize)
        puntos.append(punto)
        if is_std:
            if is_median:
                plt.errorbar(x[iplot],endres_plot[iplot],yerr = [[endres_std_plot[iplot,0]],
                                                                 [endres_std_plot[iplot,1]]],
                             fmt = formatsos[iplot], lw = 2, ms = markersize, label = 'this',
                             mfc = coleros[iplot],mec=coleros[iplot], mew = markeredgesize)
            else:
                plt.errorbar(x[iplot],endres_plot[iplot],yerr = endres_std_plot[iplot],
                             fmt = formatsos[iplot], lw = 2, ms = markersize, label = 'this',
                             mfc = coleros[iplot],
                             mew = markeredgesize,
                             mec = 'black')

    # Legend
    num_inleg = num_pack
    num_legs = num_methods/num_inleg + int(bool(np.mod(num_methods,num_inleg))) 
    num_inlastleg = np.mod(num_methods,num_inleg) if np.mod(num_methods,num_inleg) else num_inleg
    leginds = [num_inleg-1+i*num_inleg if i<num_legs-1 else num_inleg-1+(i-1)*num_inleg+num_inlastleg 
               for i in range(num_legs)] #last indices of a group of indices
    legranges = [num_inleg if i<num_legs-1 else num_inlastleg 
                 for i in range(num_legs)] 

    for ileg in range(len(leginds)):
        xleg = 0.15 + ileg*0.8/num_legs
        first_legend = plt.legend(handles = [puntos[i] for i in range(leginds[ileg]-legranges[ileg]+1,
                                                                     leginds[ileg]+1)],
                                  bbox_to_anchor = [xleg,
                                                    0.00,
                                                    0.8/num_legs,
                                                    0.3],
                                  bbox_transform=plt.gcf().transFigure,
                                  # loc = [0.0,1.0],
                                  mode = 'expand',
                                  # labelspacing = 1.0,
                                  ncol =1, numpoints = 1,
                                  fontsize = fontleg,
                                  framealpha = 1.0, markerscale = 1.0)
        plt.gca().add_artist(first_legend)


    plt.figure('Errorplot')

    # Lines
    for xline in range(0,16,num_pack+1):
        plt.vlines(xline,0.0,1.0, linestyles = 'dotted')
    
    for yline in yticks:
        plt.hlines(yline,0,20,linestyles = 'dotted')

    plt.hlines(0.62,0,20,linestyles = 'dashed')

    # Style
    plt.title('Ensemble size = '+str(ensemble_size), y = 1.03, fontsize = fonttit)
    plt.xlim([0,num_legs*(num_pack+1)])
    plt.ylabel(r'RMSE [$\log(\frac{1}{m^2})$]',fontsize = fontlab, labelpad = 10)
    plt.gca().tick_params(direction = 'in', length = 6,
                   width = 1, labelsize = fonttic,
                   top = 'off', right = 'off', bottom = 'off',
                   pad = 8)
    plt.gca().set_xticks([])
    plt.gca().set_yticks(yticks)
    plt.gca().get_xaxis().set_visible('off')
    plt.ylim(ylims)

    # Save pic
    if is_save:
        pic_name_full = pic_name_start + str(ensemble_size).zfill(4) +  pic_name_end
        plt.savefig(pic_dir + pic_name_full)
        print('Saved as ' + pic_dir + pic_name_full)
        
            
    if is_show:
        plt.show('Errorplot')
    else:
        plt.close()

os.chdir('/home/jk125262/PythonDir')
