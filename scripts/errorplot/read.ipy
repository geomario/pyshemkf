# Errorplot-Read

import os
import matplotlib as mpl
import numpy as np
from mypackage.plot import plotfunctions as pf
from mypackage.plot import plotarrays as pa
from mypackage.run import runmodule as rm
import pandas as pd

# Main inputs
is_1000 = False
is_wavebc = True 


which_methods = [0,1,2,3,4,5,6] if is_wavebc else [0,1,2,3,4,5,6]
num_methods = len(which_methods)                           # Bei 13 Problem, nicht eingeladen...

num_ensemble_sizes = ((4 if is_1000 else 3) if is_wavebc else (4 if is_1000 else 7))

dats = ((pa.dats1000_wavebc if is_1000 else pa.dats_wavebc)
            if is_wavebc else (pa.dats1000 if is_1000 else pa.dats))
lets = ((pa.lets1000_wavebc if is_1000 else pa.lets_wavebc)
            if is_wavebc else (pa.lets1000 if is_1000 else pa.lets))
nums = ((pa.nums1000_wavebc if is_1000 else pa.nums_wavebc)
            if is_wavebc else (pa.nums1000 if is_1000 else pa.nums))
legend_input = pa.longnames_methods

# Legend inputs
legend_input = np.array([legend_input[i].ljust(18) for i in range(len(legend_input))])
legend_input = legend_input[which_methods]

# WAVEBC ending
wavebc = '_wavebc' if is_wavebc else ''

# Initialize zero-arrays
endres_mean = np.zeros([num_methods,num_ensemble_sizes])
endres_mean_nooutliers = np.zeros([num_methods,num_ensemble_sizes])
endres_std = np.zeros([num_methods,num_ensemble_sizes])
endres_std_nooutliers = np.zeros([num_methods,num_ensemble_sizes])
endres_median = np.zeros([num_methods,num_ensemble_sizes])
endres_q1 = np.zeros([num_methods,num_ensemble_sizes])
endres_q3 = np.zeros([num_methods,num_ensemble_sizes])

outliers06 = np.zeros([num_methods,num_ensemble_sizes])
outliersbeg= np.zeros([num_methods,num_ensemble_sizes])

whereoutliers = []

begres_mean = np.zeros([num_methods,num_ensemble_sizes])
begres_std = np.zeros([num_methods,num_ensemble_sizes])
begres_median = np.zeros([num_methods,num_ensemble_sizes])
begres_q1 = np.zeros([num_methods,num_ensemble_sizes])
begres_q3 = np.zeros([num_methods,num_ensemble_sizes])

# i_kind: counter
# j_kind: method-index
for i_kind, j_kind in enumerate(which_methods):

    for j in range(num_ensemble_sizes):
        dat = dats[j_kind][j]
        let = lets[j_kind][j]
        num = nums[j_kind][j]

        # Load the residual arrays produced in endresread.ipy
        begres = np.load(os.environ['HOME']+'/PythonDir/output/dists/begres_'
                         +dat+'_'+let+'.npy')
        endres = np.load(os.environ['HOME']+'/PythonDir/output/dists/endres_'
                         +dat+'_'+let+'.npy')
 
        # Calculate different statistics
        outliers06[i_kind,j] = np.where(np.array(endres)>0.6)[0].size
        outliersbeg[i_kind,j] = np.where(np.array(endres)>np.array(begres))[0].size
        whereoutliers.append(np.where(np.array(endres)>np.array(begres))[0])        

        begres_mean[i_kind,j] = np.mean(begres)
        begres_std[i_kind,j] = np.std(begres)
        begres_median[i_kind,j] = np.percentile(begres,50)
        begres_q1[i_kind,j] = np.percentile(begres,25)
        begres_q3[i_kind,j] = np.percentile(begres,75)
        
        endres_mean[i_kind,j] = np.mean(endres)
        endres_mean_nooutliers[i_kind,j] = np.mean(np.delete(endres,np.where(np.array(endres)>np.array(begres))[0]))
        endres_std[i_kind,j] = np.std(endres)
        endres_std_nooutliers[i_kind,j] = np.std(np.delete(endres,np.where(np.array(endres)>np.array(begres))[0]))
        endres_median[i_kind,j] = np.percentile(endres,50)
        endres_q1[i_kind,j] = np.percentile(endres,25)
        endres_q3[i_kind,j] = np.percentile(endres,75)

# Saving arrays containing the residuals and their standard deviations
os.chdir(os.environ['HOME']+'/PythonDir')

if is_1000:
    np.save('output/errorplot/npy/outliers061000'+wavebc,outliers06)
    np.save('output/errorplot/npy/outliersbeg1000'+wavebc,outliersbeg)
    np.save('output/errorplot/npy/whereoutliers1000'+wavebc,whereoutliers)
    np.save('output/errorplot/npy/endres_mean1000'+wavebc,endres_mean)
    np.save('output/errorplot/npy/endres_mean_nooutliers1000'+wavebc,endres_mean_nooutliers)
    np.save('output/errorplot/npy/endres_std1000'+wavebc,endres_std)
    np.save('output/errorplot/npy/endres_std_nooutliers1000'+wavebc,endres_std_nooutliers)
    np.save('output/errorplot/npy/endres_median1000'+wavebc,endres_median)
    np.save('output/errorplot/npy/endres_q11000'+wavebc,endres_q1)
    np.save('output/errorplot/npy/endres_q31000'+wavebc,endres_q3)
    np.save('output/errorplot/npy/begres_mean1000'+wavebc,begres_mean)
    np.save('output/errorplot/npy/begres_std1000'+wavebc,begres_std)
    np.save('output/errorplot/npy/begres_median1000'+wavebc,begres_median)
    np.save('output/errorplot/npy/begres_q11000'+wavebc,begres_q1)
    np.save('output/errorplot/npy/begres_q31000'+wavebc,begres_q3)
    np.save('output/errorplot/npy/dats1000'+wavebc,np.array(dats))
    np.save('output/errorplot/npy/lets1000'+wavebc,np.array(lets))
    np.save('output/errorplot/npy/nums1000'+wavebc,np.array(nums)[which_methods,0:num_ensemble_sizes])

    np.save('output/errorplot/npy/legend_input1000'+wavebc,legend_input)
else:
    np.save('output/errorplot/npy/outliers06'+wavebc,outliers06)
    np.save('output/errorplot/npy/outliersbeg'+wavebc,outliersbeg)
    np.save('output/errorplot/npy/whereoutliers'+wavebc,whereoutliers)
    np.save('output/errorplot/npy/endres_mean'+wavebc,endres_mean)
    np.save('output/errorplot/npy/endres_mean_nooutliers'+wavebc,endres_mean_nooutliers)
    np.save('output/errorplot/npy/endres_std'+wavebc,endres_std)
    np.save('output/errorplot/npy/endres_std_nooutliers'+wavebc,endres_std_nooutliers)
    np.save('output/errorplot/npy/endres_median'+wavebc,endres_median)
    np.save('output/errorplot/npy/endres_q1'+wavebc,endres_q1)
    np.save('output/errorplot/npy/endres_q3'+wavebc,endres_q3)
    np.save('output/errorplot/npy/begres_mean'+wavebc,begres_mean)
    np.save('output/errorplot/npy/begres_std'+wavebc,begres_std)
    np.save('output/errorplot/npy/begres_median'+wavebc,begres_median)
    np.save('output/errorplot/npy/begres_q1'+wavebc,begres_q1)
    np.save('output/errorplot/npy/begres_q3'+wavebc,begres_q3)
    np.save('output/errorplot/npy/dats'+wavebc,np.array(dats))
    np.save('output/errorplot/npy/lets'+wavebc,np.array(lets))
    np.save('output/errorplot/npy/nums'+wavebc,np.array(nums)[which_methods,0:num_ensemble_sizes])

    np.save('output/errorplot/npy/legend_input'+wavebc,legend_input)


os.chdir(os.environ['HOME']+'/PythonDir')
