import shutil
import numpy as np
import matplotlib.pyplot as plt

import mypackage.errorplot.arrays as ea
import mypackage.errorplot.plot as ep
import mypackage.errorplot.read as er
import mypackage.errorplot.sort as es
import mypackage.run.pythonmodule as pm

# Switches
is_read = 1
is_sort = 1
is_plot = 1
is_quot = 0
is_save = 0
is_show = 1
is_backup = 0

model = 'wavereal'
which_methods = [0,1,2,3,4,5,112,141,142,151,152]
stat_method = 'mean'

# Read
if is_read:
    stat_array, stat_array_name = er.read(
        model = model,
        which_methods = which_methods,
        stat_method = stat_method,
        which_res = 'endres',
        # n_runs = 100,
        )

    np.save(stat_array_name,stat_array)
    print('Saved as ' + stat_array_name)

# Sort
if is_sort:
    stat_array, stat_array_name, which_methods_sorted = es.sort(
        model = model,
        which_methods = which_methods,
        n_runs = 1000,
        template_model = model,
        template_which_methods = which_methods,
        template_enssize = 50,
        stat_method = stat_method,
        which_res = 'endres',
        )

    np.save(stat_array_name,stat_array)
    print('Saved as ' + stat_array_name)

else:
    which_methods_sorted = which_methods

# Plot
if is_plot:

    # Figure
    fig = plt.figure('Errorplot',figsize=[25,10])

    # Run plot function
    ax, pic_name = ep.plot(fig.add_subplot(1,1,1),
                           model = model,
                           which_methods = which_methods_sorted,
                           stat_method = stat_method,
                           pic_format = 'pdf',
                           is_std = False,
                           std_method = 'stdm',
                           figpos = [0.1,0.3,0.85,0.6],
                           # n_runs = 100,
                           # which_enssize = [500,1000,2000],
                           ylims = [0.29,0.4],
                           yticks = np.arange(0.3,0.5,0.02),
                           fontleg = 12,
                       )
    # Save
    if is_save:
        plt.savefig(pic_name)
        print('Saved as ' + pic_name)

    # Show
    if is_show:
        plt.show()
    else:
        plt.clf()

# Quot
if is_quot:

    # Figure
    fig = plt.figure('Quotients',figsize=[10,10])

    # Run plot function
    ax, pic_name = ep.quots(fig.add_subplot(1,1,1),
                            model = model,
                            which_methods = which_methods_sorted,
                            stat_method = stat_method,
                            pic_format = 'pdf',
                            enssize = 250,
                       )
    # Save
    if is_save:
        plt.savefig(pic_name)
        print('Saved as ' + pic_name)

    # Show
    if is_show:
        plt.show()
    else:
        plt.clf()


# Backup
if is_backup:
    pm.py_backup(pm.python_scripts_dir,ea.tag,"runplot","ipy",str(model),'_'.join([str(i) for i in which_methods_sorted])[:],'2017_10_06')
