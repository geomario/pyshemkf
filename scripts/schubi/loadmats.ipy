import scipy as sc
from scipy import io

# Load matrices from Alex
pt100_min = sc.io.loadmat('/home/jk125262/schubi/pt100_min.mat')['pt100_min']
temp_min = sc.io.loadmat('/home/jk125262/schubi/temp_min.mat')['temp_min']
temp_min_div = sc.io.loadmat('/home/jk125262/schubi/temp_min_div.mat')['temp_min_div']

# Time differences in seconds
pt100_sec = np.zeros(pt100_min.shape)
pt100_sec[:,0] = (pt100_min[:,0]-pt100_min[0,0])*24.0*60.0*60.0
pt100_sec[:,1:] = pt100_min[:,1:]
temp_sec = np.zeros(temp_min.shape)
temp_sec[:,0] = (temp_min[:,0]-temp_min[0,0])*24.0*60.0*60.0
temp_sec[:,1:] = temp_min[:,1:]
temp_sec_div = np.zeros(temp_min_div.shape)
temp_sec_div[:,0] = (temp_min_div[:,0]-temp_min_div[0,0])*24.0*60.0*60.0
temp_sec_div[:,1:] = temp_min_div[:,1:]

# Write "# bc time periods" entry --------------------------------------------
# tag
# 1: s2, unit 3, upper right
# 2: s4, unit 6, lower right
# 3: s6, unit 5, lower left
# 4: s8, unit 4, upper left
tag = 4
timeperiods = [0.0,86.4,446.4,866.4,1286.4,1706.4,3126.4,6972.8,10000.8,13000.8,18000.8,26000.8]
timesteps = np.hstack([[timeperiods[j-1]+(timeperiods[j]-timeperiods[j-1])*(i/4.0) for i in range(4)] for j in range(1,len(timeperiods))])
inds = np.unique([np.where(pt100_sec[:,0] <=t)[0][-1] for t in timesteps])

# bc_t_p
# Column 1: Times in seconds from starting time
# Column 2: Temperatures for tag
# Column 3: Zeros
bc_t_p = np.array([
    np.around(pt100_sec[inds,0],0),
    np.around(pt100_sec[inds,tag],2),
    np.zeros(np.shape(inds)),
    ]).transpose()

# Write file with "# bc time periods" entry
# np.savetxt('/home/jk125262/PythonDir/scripts/schubi/bc_time_periods_'+str(tag)+'.txt',bc_t_p,fmt="%.1fd0 %.2fd0 %.1fd0",header=str(tag)+' '+str(inds.size),comments = '')
