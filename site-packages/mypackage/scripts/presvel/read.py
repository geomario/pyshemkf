# Read routine for forward arrays
import exceptions
import numpy as np

from mypackage.tools.plot import specs as sc

# from mypackage.tools.plot import plotfunctions as pf
from mypackage.tools.run import runmodule as rm
from mypackage.tools.run import pythonmodule as pm
from mypackage.scripts.presvel import arrays as pva


def read(
        model_name,
        dat,
        let,
        fdir=None,
        fname=None,
        befaft='aft',
):
    """
    Reading velocity array from SHEMAT-Suite txt-file.

    Parameters
    ----------
    model_name : string
        String of model name.

    dat : string
        String with date of model run.

    let : string
        String of letter of model run.

    befaft : string
        Specifies whether the output is read in from
        before ('bef') or after ('aft') the EnKF update.

    Returns
    -------
    numpy_array : array
        Array containing the velocity array
        vs[i,j,k]
        i: vx (0) or vy (1)
        j: assimilation number index
        k: ensemble member index

    numpy_array_name : string
        Containing proposed saving location for Array.
    """

    # Dirs
    if fdir is None:
        # enkf_output_dir
        fdir = rm.make_output_dirs(model_name, dat, let)[2]
    if fname is None:
        # Velocity output
        if befaft in ['bef', 'aft']:
            fname = "prescribed_velocity_"+befaft+".txt"
        else:
            raise exceptions.RuntimeError(
                'Wrong before/after specifier befaft = "'
                + befaft
                + '"'
            )

    # Load properties #########################################################
    nrens = sc.nrens(model_name, dat, let)
    num_pres_vel = sc.num_pres_vel(model_name, dat, let)
    if not num_pres_vel == 2:
        raise exceptions.RuntimeError(
            'Needs to read in two velocity components.'
        )

    # Load velocities #########################################################
    vs = np.loadtxt(fdir+'/'+fname, skiprows=1)

    # Numpy Array  ############################################################
    numpy_array = np.array([vs[:, :nrens], vs[:, nrens:]])

    # Numpy Array Name ########################################################
    numpy_array_name = pm.py_output_filename(
        pva.tag,
        'vs',
        sc.specl(model_name, dat, let)+'_'+befaft,
        "npy",
    )

    return numpy_array, numpy_array_name


def mean(
        model_name,
        dat,
        let,
        befaft='aft',
):
    """
    Computing mean velocity array.

    Parameters
    ----------
    model_name : string
        String of model name.

    dat : string
        String with date of model run.

    let : string
        String of letter of model run.

    befaft : string
        Specifies whether the output is read in from
        before ('bef') or after ('aft') the EnKF update.

    Returns
    -------
    mean_array : array
        Array containing the array of ensemble mean velocities
        means[i,j]
        i: vx (0) or vy (1)
        j: assimilation number index

    mean_array_name : string
        Containing proposed saving location for Array.
    """

    # Load velocity array #####################################################
    vs = np.load(pm.py_output_filename(
        pva.tag,
        'vs',
        sc.specl(model_name, dat, let)+'_'+befaft,
        "npy",
    ))

    # Mean Array  #############################################################
    mean_array = np.mean(vs, axis=2)

    # Mean Array Name #########################################################
    mean_array_name = pm.py_output_filename(
        pva.tag,
        'mvs',
        sc.specl(model_name, dat, let)+'_'+befaft,
        "npy",
    )

    return mean_array, mean_array_name


def rad_ang(
        model_name,
        dat,
        let,
        befaft='aft',
):
    """
    Computing mean velocity array as absolute value and angle.

    Parameters
    ----------
    model_name : string
        String of model name.

    dat : string
        String with date of model run.

    let : string
        String of letter of model run.

    befaft : string
        Specifies whether the output is read in from
        before ('bef') or after ('aft') the EnKF update.

    Returns
    -------
    numpy_array : array
        Array containing the array of velocities
        means[i,j]
        i: rad (0) or ang (1)
        j: assimilation number index

    numpy_array_name : string
        Containing proposed saving location for Array.
    """

    # Load velocity array #####################################################
    mvs = np.load(pm.py_output_filename(
        pva.tag,
        'mvs',
        sc.specl(model_name, dat, let)+'_'+befaft,
        "npy",
    ))

    # Mean Array  #############################################################
    numpy_array = np.array(
        [
            np.sqrt(mvs[0, :]*mvs[0, :] + mvs[1, :]*mvs[1, :]),
            np.arctan(mvs[1, :]/mvs[0, :]) / np.pi * 180
        ]
    )

    # Corrections for second and third quadrant ###############################
    for i in range(len(mvs[0, :])):
        if mvs[0, i] < 0.0:
            if mvs[1, i] > 0.0:
                numpy_array[1, i] = numpy_array[1, i] + 180
            else:
                numpy_array[1, i] = numpy_array[1, i] - 180

    # Mean Array Name #########################################################
    numpy_array_name = pm.py_output_filename(
        pva.tag,
        'rad_ang',
        sc.specl(model_name, dat, let)+'_'+befaft,
        "npy",
    )

    return numpy_array, numpy_array_name
