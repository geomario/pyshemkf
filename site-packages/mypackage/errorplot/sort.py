# Sort routine for errorplot arrays
import numpy as np

from mypackage.plot import plotfunctions as pf
from mypackage.run import pythonmodule as pm
from mypackage.errorplot import arrays as ea


def sort(
        which_methods,
        indsort=None,
        n_runs=1000,
        model_name='wavebc',
        which_res='endres',
        stat_method='mean',
        template_model_name='wavebc',
        template_which_res='endres',
        template_stat_method='mean',
        template_n_runs=1000,
        template_enssize=50,
):
    """
    Reads a template array and sorts the indices. Then it
    sorts the specified stat_array in the same order.

    Parameters
    ----------
    which_methods : array int
        Array of integers containing the method specifiers
        from module plotarrays.

    n_runs : integer
        1000 - typically exist for ensemble sizes 50, 70, 100, 250
        100 - typically exist for ensemble sizes 500, 1000, 2000

    model_name : string
        'wavebc' - Model wavebc
        'wave' - Model wave

    which_res : string
        'endres' - use residuals after EnKF run
        'begres' - use residuals before EnKF run

    stat_method : string
        'mean' - Calculate means
        'std' - Standard deviation
        'stdm' - Standard deviation of the mean
        'median' - Median or 50 Percentile
        'q25' - 25 Percentile
        'q75' - 75 Percentile

    template_n_runs : integer
        1000 - typically exist for ensemble sizes 50, 70, 100, 250
               template
        100 - typically exist for ensemble sizes 500, 1000, 2000
              template

    template_model_name : string
        'wavebc' - Model wavebc for template
        'wave' - Model wave for template

    template_which_res : string
        Specified of the template array.
        'endres' - use residuals after EnKF run
        'begres' - use residuals before EnKF run

    template_enssize : integer
        Ensemble size of the template. Possibilities: 50,
        70, 100, 250, 500, 1000, 2000

    template_stat_method : string
        Specified of the template array.
        'mean' - Calculate means
        'std' - Standard deviation
        'stdm' - Standard deviation of the mean
        'median' - Median or 50 Percentile
        'q25' - 25 Percentile
        'q75' - 75 Percentile

    Returns
    -------
    stat_array : array
        Array containing the statistical measures (sorted).

    stat_array_name : string
        Containing proposed saving location for array (sorted).

    which_methods_sorted : array of ints
        Array sorted indices.
    """

    # Indices for sorting order
    if not indsort:
        indsort = pf.indsort(
            which_methods,
            model_name=template_model_name,
            which_res=template_which_res,
            stat_method=template_stat_method,
            n_runs=template_n_runs,
            enssize=template_enssize,
        )

    # Load to be sorted array
    stat_array = np.load(
        pm.py_output_filename(
            ea.tag,
            which_res,
            stat_method+'_'+str(n_runs)+'_'+model_name+'_'
            + '_'.join([str(i) for i in which_methods]),
            'npy'
        )
    )

    # Sort array
    for i in range(stat_array.shape[1]):
        stat_array[:, i] = np.array(stat_array)[:, i][indsort]

    # Sort which_methods
    which_methods_sorted = np.zeros(np.shape(which_methods), dtype=np.int64)
    for i in range(len(which_methods)):
        which_methods_sorted[i] = which_methods[indsort[i]]

    # Name for sorted array
    stat_array_name = pm.py_output_filename(
        ea.tag,
        which_res,
        stat_method+'_'+str(n_runs)+'_'+model_name+'_'
        + '_'.join([str(i) for i in which_methods_sorted]),
        'npy'
    )

    return stat_array, stat_array_name, which_methods_sorted
