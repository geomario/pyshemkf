#!/usr/bin/python

# Operating system commands
import exceptions
# import sys

import numpy as np

from mypackage.run import runmodule as rm


###############################################################################
#                                      x                                      #
###############################################################################
def x(model_name, dat, let):
    """
    Read model name and return the corresponding
    array of x-coordinates of cell centers.
    """
    delxarr = delx(model_name, dat, let)
    arr = np.array([np.sum(delxarr[:i])+0.5*delxarr[i]
                    for i in range(delxarr.size)])
    return arr


###############################################################################
#                                      y                                      #
###############################################################################
def y(model_name, dat, let):
    """
    Read model name and return the corresponding
    array of y-coordinates of cell centers.
    """
    delyarr = dely(model_name, dat, let)
    arr = np.array([np.sum(delyarr[:i])+0.5*delyarr[i]
                    for i in range(delyarr.size)])
    return arr


###############################################################################
#                                    xticks                                   #
###############################################################################
def xticks(model_name, dat, let):
    """
    Read model name and return the corresponding
    array of x-coordinates of left side of cells.
    """
    delxarr = delx(model_name, dat, let)
    arr = np.array([np.sum(delxarr[:i]) for i in range(delxarr.size+1)])
    return arr


###############################################################################
#                                    yticks                                   #
###############################################################################
def yticks(model_name, dat, let):
    """
    Read model name and return the corresponding
    array of y-coordinates of front side of cells.
    """
    delyarr = dely(model_name, dat, let)
    arr = np.array([np.sum(delyarr[:i]) for i in range(delyarr.size+1)])
    return arr


###############################################################################
#                                     delx                                    #
###############################################################################
def delx(model_name, dat, let):
    """
    Read model name, output date and letter and
    return the corresponding array of cell lengths
    in x-direction.
    """
    output_dir = rm.make_output_dirs(model_name, dat, let)[0]
    input_file = rm.make_file_dir_names(model_name)[2]

    if rm.check_hashtag(output_dir, input_file, "# delx"):
        line = rm.read_hashtag_input(output_dir+'/'+input_file,
                                     '# delx', 1)
    else:
        input_file = rm.make_file_dir_names(model_name)[4]
        if rm.check_hashtag(output_dir, input_file, "# delx"):
            line = rm.read_hashtag_input(output_dir+'/'+input_file,
                                         '# delx', 1)
        else:
            raise exceptions.IOError('Input files and hashtags not found:\n\n'
                                     + output_dir + '\n\n'
                                     + input_file)

    num_entries = len(str.split(line))
    nums = [int(str.split(str.split(line)[i], "*")[0])
            for i in range(num_entries)]
    lens = [float(str.split(str.split(line)[i], "*")[1])
            for i in range(num_entries)]

    vec = [[lens[i] for j in range(nums[i])] for i in range(num_entries)]

    arr = np.array([num for elem in vec for num in elem])
    return arr


###############################################################################
#                                     dely                                    #
###############################################################################
def dely(model_name, dat, let):
    """
    Read model name, output date and letter and
    return the corresponding array of cell lengths
    in y-direction.
    """
    output_dir = rm.make_output_dirs(model_name, dat, let)[0]
    input_file = rm.make_file_dir_names(model_name)[2]

    if rm.check_hashtag(output_dir, input_file, "# dely"):
        line = rm.read_hashtag_input(output_dir+'/'+input_file,
                                     '# dely', 1)
    else:
        input_file = rm.make_file_dir_names(model_name)[4]
        if rm.check_hashtag(output_dir, input_file, "# DELY"):
            line = rm.read_hashtag_input(output_dir+'/'+input_file,
                                         '# dely', 1)
        else:
            raise exceptions.IOError('Input files and hashtags not found:\n\n'
                                     + output_dir + '\n\n'
                                     + input_file)

    num_entries = len(str.split(line))
    nums = [int(str.split(str.split(line)[i], "*")[0])
            for i in range(num_entries)]
    lens = [float(str.split(str.split(line)[i], "*")[1])
            for i in range(num_entries)]

    vec = [[lens[i] for j in range(nums[i])] for i in range(num_entries)]

    arr = np.array([num for elem in vec for num in elem])
    return arr
