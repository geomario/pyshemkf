import numpy as np

from pskf.tools.run import pythonmodule as pm

from pskf.scripts.uindex import arrays as ua

from pskf.tools.plot import specs as sc


###############################################################################
#                          Uindex min-mean-max plot                           #
###############################################################################
def plot(
        ax,
        model_name='wavebc',
        dat='2010_01_30',
        let='a',
        uindices=[1, 2, 3, 4, 5, 6],
        varname='temp',
        nt=0,
        pic_format='pdf',
        axistitle='',
        figpos=[0.15, 0.15, 0.8, 0.8],
        ylims=[0.28, 0.82],
        yticks=None,
        markersize=10,
        markeredgesize=1.5,
        fonttit=40,
        fontlab=40,
        fonttic=30,
):
    """
    A plotting function for statistics of uindex variable distributions.

    Parameters
    ----------
    ax : Axes
        The axes to draw to.

    model_name : string
        String of model name.
        'wavebc' - Model wavebc
        'wave' - Model wave

    dat : string
        String with date of model run.

    let : string
        String of letter of model run.

    uindices : array of ints
        Array of integers containing the unit indices
        from which to variable statistics are collected or
        shown.

    varname : string
        Variable name for array to be read.
        Possibilities: 'kz_mean' 'kz_std','head_mean','lz_mean', 'temp_mean'

    nt : string
        Number of time step output.

    pic_format : string
        Format of the picture
        'pdf' - pdf-format
        'eps' - eps-format
        'png' - png-format
        'jpg' - jpg-format
        'svg' - svg-format

    figpos : array of floats
        Four numbers
        xbeg, ybeg, xrange, yrange

    More input specifying plot parameters.

    Returns
    -------
    ax : Axes
        Axes containing plot.

    pic_name : string
        Containing proposed saving location for Figure.
    """

    # Title
    ax.set_title(axistitle, size=fonttit)

    # Number of methods
    num_uindices = len(uindices)

    # Initialize min, max, mean arrays
    mins = np.zeros(num_uindices)
    maxs = np.zeros(num_uindices)
    means = np.zeros(num_uindices)

    for i, uindex in enumerate(uindices):
        # Load unit index variable array
        uindex_var_array = np.load(pm.py_output_filename(
            ua.tag,
            varname,
            sc.specl(model_name, dat, let)+'_'+str(nt)+'_'+str(uindex),
            "npy",
        ))

        # Calculate min, max mean
        mins[i] = np.min(uindex_var_array)
        maxs[i] = np.max(uindex_var_array)
        means[i] = np.mean(uindex_var_array)

    # Axis parameters
    ax.set_prop_cycle("color", ['k'])
    ax.set_position(figpos)

    # Plot
    ax.errorbar(
        np.arange(1, num_uindices+1),
        means,
        [means - mins, maxs - means],
        fmt='.k',
        lw=2,
        ms=markersize,
        label='this',
        mew=markeredgesize,
        mec='black'
    )

    # Style
    ax.set_xlim([0, num_uindices+1])
    ax.set_ylabel(r'Temperature [$^{\circ}\, C$]',
                  fontsize=fontlab,
                  labelpad=10)
    ax.set_xlabel(r'uindex',
                  fontsize=fontlab,
                  labelpad=10)
    ax.tick_params(direction='in', length=6,
                   width=1, labelsize=fonttic,
                   top='off', right='off', bottom='off',
                   pad=8)
    ax.set_xticks(np.arange(1, num_uindices+1))
    ax.set_xticklabels(uindices)
    if yticks:
        ax.set_yticks(yticks)
    ax.set_ylim(ylims)
    ax.grid()

    # Saving location
    pic_name = pm.py_output_filename(
        ua.tag,
        varname,
        sc.specl(model_name, dat, let)+'_'+str(nt)+'_'+str(uindex),
        pic_format,
    )

    return ax, pic_name
